∆F←{ 
  ⍝ Simple format string function in APL style, inspired by Python F-strings.
  ⍝ Syntax: [opts] ∆F format_string  args
  ⍝        format_string: char vector with formatting specifications
  ⍝        args: arguments accessible in format_string: ⍹1=1st arg (⎕IO independent)
  ⍝        opts: [⍺←MODE DEBUG←1 0 | 'help' | ⍬]
  ⍝ For help, execute 
  ⍝   ∆F⍨'help' 
  ⍝ or see ⍝H comments at the bottom of this function.
    ⍺←1 0
    ⍬≡⍺:          _←1 0⍴''                         
    'help'≡⍥⎕C⍕⍺: ⎕ED 'help'⊣help←↑'^\h*⍝H(.*)' ⎕S '\1'⊢⎕NR ⊃⎕XSI
    ×80|⎕DR ⊃⊆⍵:  ⎕SIGNAL⊂ ('EM' '∆F DOMAIN ERROR') ('Message' 'Invalid format string') ('EN' 11)
    ⍲/(2↑⍺)∊¨1 0 ¯1,⍥⊂1 0: ⎕SIGNAL⊂('Message' ,⍥⊂'Invalid option/s (⍺): ',⍕⍺)('EN' 11 )
    
    (2↑⍺)((⊃⎕RSI){ 
    ⍝ Anonymous operator: ⍺ (⍺⍺ ∇∇ ⍵⍵) ⍵
    ⍝    ⍺: options, ⍺⍺: caller namespace, ⍵⍵: original ⍵, ⍵: format stmt as executable code
      0:: ⎕SIGNAL⊂ ⎕DMX.( ('Message' Message) ('EN' EN) ('EM',⍥⊂'∆F ',EM)  )
      ⍝ If (1=⊃⍺), execute ⍵ (format str=>code) with rt arg ⍵⍵ (caller's ⍵) in caller namespace ⍺⍺
        1=⊃⍺: ⍺⍺⍎⍵,'⍵⍵'  ⊣⍵⍵
      ⍝ Else (⊃⍺)∊0 ¯1: Return executable string (⍺=0) or pseudo-executable(⍺=¯1), passing orig. fmt str ⍵0   
        EnSQ← '''','''',⍨⊢(/⍨)1+''''∘=
        '{',⍵,(EnSQ ⊃⍵⍵),',⍥⊆⍵}'  
    }(,⊆⍵))(2↑⍺){

      0:: ⎕SIGNAL ⎕DMX.(⊂('EM' '∆F INTERNAL ERROR')('Message',⍥⊂EM{⍺,⍵,⍨': '/⍨0≠≢⍵}Message)('EN' 11))
        ⎕IO ⎕ML←0 1
        MODE DEBUG← ⍺  
      ⍝ Note pseudonames ⍙CHAIN, ⍙BOX, and ⍙OVER. These are not executed and only serve to show
      ⍝ what's happening when MODE option ¯1 is used.

      ⍝ ⍺ CodSel ⍵- Code Select per Mode
      ⍝ ⍺: code string, ⍵: symbolic representation of the code string
      ⍝ Returns: (symbolic rep) if MODE=¯1, else code string. Code is padded with blanks as needed.
        CodSel← { l, c, r⊣ l r←(' '/⍨~⍤∊∘'⊃⎕{}()/')¨(⊃,⊃∘⌽)c← ⍺ ⍵ ⊃⍨¯1=MODE  } 
      ⍝ CHAINSCAN (preamble code), CHAIN (%% shortcut): Pad/Catenate horizontally objs ⍺ and ⍵.
      ⍝   1. Converts ⍺ and ⍵ to char matrices a and w, and
      ⍝   2. Catenates a to left of w, aligning shorter to the height of the taller matrix.
        CHAINcod←      '{⊃,/⍺ ⍵↑⍨¨⌈⍥≢/⍺ ⍵}⍥⎕FMT'  CodSel  '⍙CHAIN' 
        CHAINSCANcod← '⊃{⊃,/⍺ ⍵↑⍨¨⌈⍥≢/⍺ ⍵}⍥⎕FMT/' CodSel '⊃⍙CHAIN/'
      ⍝ ⎕FMT ($ shortcut): for use of dyadic ⎕FMT.
        FMTcod←  '⎕FMT ' 
      ⍝ BOX ($ shortcut): Generate a boxed display of ⍵
        dis←'⎕SE.Dyalog.Utils.display'
        3≠⎕NC dis: 6 ⎕SIGNAL⍨'∆F VALUE ERROR: Utility "',dis,'" not found.'
        BOXcod←  dis CodSel '⍙BOX'  
      ⍝ OVER ($ shortcut): Pad/Center/Catenate vertically objs ⍺ and ⍵.
      ⍝ 1. Converts ⍺, ⍵ to char matrices a and w (as needed), and 
      ⍝ 2. Catenates a over w, centering and padding the narrower matrix to the width of the wider.
        ovr←'(⊃⍪/)⍤{T←↑⍤¯1⋄m←⌈/a b←⍺,⍥(⊃⌽⍤⍴)⍵⋄a b{⍺=m:⍵⋄m T⍵T⍨-⌊⍺+0.5×m-⍺}¨⍺⍵}⍥⎕FMT'
        OVERcod← ovr CodSel '⍙OVER'

      ⍝ Misc Util
        EnSQ← '''','''',⍨⊢(/⍨)1+''''∘=

      ⍝ Main Processing Routines: 
      ⍝ A. ProcTF   - Subprocess Text Fields
      ⍝ B. ProcCSF  - Subprocess Code and Space Fields
      ⍝ C. ProcAllF - Process All Fields
      ⍝ D. DivFStr2F- Divide Format String to Fields
      
      ⍝ A. ProcTF -  Subprocess Text Fields
      ⍝ Text Field Escapes  
        TFEsc← '(?<!\\)\\⋄'  '\\([{}\\])' ⎕R ('\r' '\\⋄' ⊃⍨¯1=MODE) '\1'  
      ⍝ ProcTF.  Process Text Fields
        ProcTF←   (' ',⊢)EnSQ⍤TFEsc 

      ⍝ B. ProcCSF - Subprocess Code and Space Fields
        ⍝ Code Field DQ String Escapes: See also ProcCSF. 
        esc2CrP←  '\\{2}⋄'
        esc1CrP←  '\\{1}⋄'
        unicodeP← '(\\{1,2})\{\h*(\d+)(?|\h*-\h*(\d+)|())\h*\}'
        ⋄ dqEscPats← esc2CrP esc1CrP unicodeP
        ⋄            esc2CrI esc1CrI unicodeI← ⍳≢dqEscPats
        DQEsc←  dqEscPats  ⎕R {
              Case← ⍵.PatternNum∘∊
              Fld←⍵.{Lengths[⍵]↑Offsets[⍵]↓Block}
              Case esc1CrI: CR '\\⋄'⊃⍨¯1=MODE   ⊣ CR←⎕UCS 13 
              Case esc2CrI: 1↓Fld 0 
            ⍝ Case unicodeI: Experimental
              2=≢Fld 1: 1↓Fld 0                          ⍝ If 2 \\, return match with just one.
            ⍝  \{mmm[-nnn]} returns ⎕UCS list in range mmm to nnn incl. (ascending or descending)
              beg end← (⊃∘⌽⎕VFI)∘Fld¨2 3 ⋄ 0=≢end:⎕UCS beg ⋄ ⎕UCS beg+(×∆)×⍳1+|∆←end-beg
        } 
        TrimR←    {⍵↓⍨-+/∧\⍺∊⍨⌽⍵}    
        dqP←      '(("[^"]*")+)' 
        sqP←      '((''[^'']*'')+)' 
        ⍝ $ and $$ shortcuts.  $: (1-,2-adic) ⎕FMT;  $$: (boxed) display.
        dolP←     '\h*(\${1,2})\h*'        
        ⋄ dolCodeV← FMTcod BOXcod
        ⍝ % Shortcut: Experimental
        pctP←     '\h*(\%{1,2})\h*'
        ⋄ pctCodeV←  OVERcod CHAINcod
        ⍝ ⍹ Shortcut: ⍹N, ⍵N, ⍹, ⍵_
        omegaNP←  '[⍵⍹](\d+)'                              ⍝ ⍹N refers to the source Format string (N⊃⍵), for N a set of digits.
        omega0P←  '⍵_|⍹_?'                                 ⍝ ⍹ or ⍵_ means "next ⍹N". Starts at N=1.
        ⍝ ⍝ Comments: (limited pattern)
        comP←     '⍝[^}⋄]+' 
        ⍝                                   
        ⋄ csfPats← dqP sqP comP dolP pctP omegaNP omega0P 
        ⋄          dqI sqI comI dolI pctI omegaNI omega0I←⍳≢csfPats
        ∆OMEGA←0
        ProcCSF←  {
            code←  csfPats ⎕R {
                ⋄ Case← ⍵.PatternNum∘∊
                ⋄ Fld←  ⍵.{Lengths[⍵]↑Offsets[⍵]↓Block}
                Case dqI:     ' ',EnSQ DQEsc 1↓¯1↓Fld 0        ⍝ DQ String: Escapes applied
                Case sqI:     Fld 0                            ⍝ SQ String: No Escapes applied
                Case comI:    ''
              ⍝ $: ⍺ ⎕FMT ⍵, $$: (box) display: of ⍵ (⍺ ignored)
                Case dolI:    dolCodeV ⊃⍨ 2=≢Fld 1  
              ⍝ %: ⍺ OVER ⍵, $$: ⍺ CHAIN ⍵
                Case pctI:    pctCodeV ⊃⍨ 2=≢Fld 1
              ⍝ Getting ⍹N sets ∆OMEGA←N and returns N⊃⍵ in code form.
                Case omegaNI: '(⍵⊃⍨⎕IO+',')',⍨F1         ⊣  ∆OMEGA⊢← ⊃⌽⎕VFI F1←Fld 1   
              ⍝ Getting ⍹ (⍵_) increments ∆OMEGA and returns ∆OMEGA⊃⍵ in code form.            
                Case omega0I: '(⍵⊃⍨⎕IO+',')',⍨⍕∆OMEGA    ⊣  ∆OMEGA+← 1   
            } 1↓¯1↓⍵                                           ⍝ Remove { and }
          ⍝ Self-documenting mode: Trailing right arrow → makes this a self-documenting code field.
            trim←  ' ⋄' TrimR code   
            '→'≠¯1↑trim:  '({', code,'}⍵)' 
          ⍝ doc:  literal "code" entered, including → and blanks around →.
          ⍝ flds: just the executable code sans →, blanks, and comments.
            doc code← (1↓¯1↓⍵) (¯1↓trim)
            ( ' ',EnSQ doc )  (' ({', code, '}⍵)')    
        }
          
      ⍝ C. ProcAllF. Process all fields by type.
      ⍝ Returns at least 2 fields (null ones if required), as required by CHAINdef (which see).
        ⋄  Pad2F←  ⊢,⍨ '⍬'⍴⍨ 0⌈ 2-≢    
        ⋄  DbgBox← { ~DEBUG: ⍵ ⋄ '(',BOXcod,⍵,')' }               
        ⋄  Scal2V← '(,',')',⍨⊢                                ⍝ Useful with DEBUG (box display) option
        ProcAllF←  Pad2F DbgBox∘{ '{'=1↑⍵:  ProcCSF ⍵  ⋄ sc←DEBUG∧1=≢⍵ ⋄ Scal2V⍣ sc⊢ ProcTF  ⍵ }¨

      ⍝ D. DivFStr2F: Divide format string into fields (convert space fields to simple code fields)
      ⍝ Returns: A set of fields, each as a char vec. 
        ⍝ Null fields-- generated by 0-width Space Fields {} or 0-width Text Fields-- are suppressed.
          ⋄ DelNullF←  ⊢(/⍨)0∘≠⍤≢¨                             ⍝ Omit null fields before processing. 
        ⍝ Space Fields handled before Code Fields: simpler, non-recursive patterns.
        ⍝ spaceNullP: {} or {:0:} ==> generates no code.
          spaceNullP← '(?x) \{ (?: \h* : 0* :? \h* )? \}'      ⍝ Null Space Field: Separates fields. 
          spaceNullR← '\r'  
          ⋄ spExtras←'((→\s*)?(⍝([^}⋄])*)?)'                   ⍝ Self Documenting Code and Comment subpatterns
        ⍝ space1P: {     } ==>  'ssss', ssss is 1 or more spaces. Also generates spExtras if used.
          space1P← '(?x) \{       ( \s*                  )        ',spExtras,' \}'    
          space1R← '\r{,''\1''\2}\r' 
        ⍝ space2P: { :n: } ==>  (' '⍴⍨nn), nn=# spaces.           Also generates spExtras if used.
          space2P← '(?x) \{ \s* : ( \d+ | [⍵⍹](?:\d+|_)? ) :? \s* ',spExtras,' \}'     
          space2R← '\r{\1⍴'' ''\2}\r' 
        ⍝ codeP: Recursively matches balanced braces {}, handling DQ strings, escapes \{, limited comments, etc.
          codeP←   '(?x) (?<P> (?<!\\) \{ (?>  [^{}"⍝\\]+ | (?:\\.)+ | (?:"[^"]*")+ | ⍝[^}⋄]* | (?&P)* )+  \} )' 
          codeR←   '\r\0\r'
      ⍝ Put it all together
        ⋄ divPats←  spaceNullP space1P space2P codeP 
        ⋄ divRepl←  spaceNullR space1R space2R codeR
        DivFStr2F← DelNullF divPats ⎕R divRepl
          
      ⍝ Executive 
        ⋄ AddPreamble← '{','}',⍨ CHAINSCANcod, ∊ 
        AddPreamble ProcAllF DivFStr2F ⊆⊃⍵
    }⊆⍵  

  ⍝H ∆F: Simple format string function in an APL style based on 2D text, variables and code, 
  ⍝H     and space fields, with shortcuts for numeric formatting, titles, and more. 
  ⍝H     Inspired by, but divergent from, F Strings in Python.
  ⍝H …………………………………………………………………………………………………………………………………………………………………………………………………………
  ⍝H Syntax:  options ∆F format_string args
  ⍝H      format_string: A string containing variables, code, text and formatting  
  ⍝H                     specifications to display a mixture of APL objects easily.
  ⍝H      args:          O or more "arguments" that can be easily used to incorporate 
  ⍝H                     on-the-fly values into the format string.
  ⍝H      options:       [ [MODE=1|0|¯1] [DEBUG/BOX=0|1]  | 'help' | ⍬ ]
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨↑¨¨¨¨¨¨¨¨¨¨¨¨¨¨↑¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H   options      ∆F Returns 
  ⍝H > MODE=1       A char matrix based on the format string and subsequent values of ⍵. 
  ⍝H                (Default mode). In this mode, 2D fields are "chained" together, right to left.
  ⍝H   MODE=0       A char vector, representing an executable dfn in string form
  ⍝H                (which can be established via MyFmtDfn← ⍎0 ∆F myFmtStr)
  ⍝H   MODE=¯1      A char vector representing the formatting as a pseudo-code string,  
  ⍝H                suitable for inspection, debugging, etc.
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H > DEBUG/BOX=0  Each field is displayed normally (and returned per MODE). (Default).
  ⍝H   DEBUG/BOX=1  Each field  will be displayed in a 2D box (and returned per MODE). 
  ⍝H                0-width fields are omitted.
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H   ⍺≡'help'     An empty char vec (''). See HELP.
  ⍝H   ⍺≡⍬          A shy char matrix (1 0⍴' '). Right arg ⍵ is ignored. No formatting is done.
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H EXAMPLES
  ⍝H ¨¨¨¨¨¨¨¨
  ⍝H Example 1a:  Text Fields and Code Fields {...} with simple variables.
  ⍝H        names←  ↑'John Jones'  'Mary Smith'
  ⍝H        addr←   ↑'1214 Maiden Ln'  '24 Hersham Rd'
  ⍝H ⎕      ∆F 'Name: { names }  Addr: { addr }'
  ⍝H     Name: John Jones  Addr: 1214 Maiden Ln
  ⍝H           Mary Smith        24 Hersham Rd 
  ⍝H 
  ⍝H Example 1b: Self-documenting code expressions {...→} in Code Fields.
  ⍝H     ⍝ Same definitions as above. 
  ⍝H ⎕      ∆F '{names→}  {addr→}'
  ⍝H     names→John Jones   addr→1214 Maiden Ln  
  ⍝H           Mary Smith        24 Hersham Rd 
  ⍝H
  ⍝H Example 1c: Titles (using the OVER shortcut %)
  ⍝H     ⍝ Same definitions as above. Char strings in {code} use double quotes like "this!". 
  ⍝H ⎕      ∆F '{"Name" % names}  {"Address" % addr}'
  ⍝H        Name        Address    
  ⍝H     John Jones  1214 Maiden Ln
  ⍝H     Mary Smith  24 Hersham Rd 
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H Example 2: Calculations and Formatting ($, short for ⎕FMT) in Code Fields.
  ⍝H       c←  100 20 12 23 ¯2
  ⍝H       F←  32+1.8∘×
  ⍝H     ⍝ 2a: Format specification as an argument ⍵1, i.e. (1+⎕IO)⊃⍵. (Degree sign (°): ⎕UCS 176)
  ⍝H ⎕     ∆F '{ ⍵1 $ c }C = { ⍵1 $ F c }F' 'I3,⊂°⊃'   ⍝ Result is a 5-row 15-col char matrix.
  ⍝H  100°C =  212°F
  ⍝H   20°      68°              
  ⍝H   12°      54°              
  ⍝H   23°      73°              
  ⍝H   ¯2°      28°  
  ⍝H
  ⍝H     ⍝ 2b: Format specification hard-wired in Code Field. 
  ⍝H     ⍝     Note alternative way to enter '°' as unicode 176 (decimal).
  ⍝H ⎕     ∆F '{ "I3,⊂°⊃" $ c }C = { "F5.1,⊂\{176}⊃" $ (32+1.8∘×) c }F'  
  ⍝H  100°C = 212.0°F
  ⍝H   20°     68.0° 
  ⍝H   12°     53.6° 
  ⍝H   23°     73.4° 
  ⍝H   ¯2°     28.4° 
  ⍝H 
  ⍝H     ⍝ 2c: Variant on (2b) with a header for each Code field using the % (OVER) shortcut.
  ⍝H ⎕     ∆F'{"Celsius" % "I3,⊂°⊃" $ c }  { "Fahren." % "F5.1,⊂°⊃" $ (32+1.8∘×) c }'
  ⍝H  Celsius  Fahren.
  ⍝H   100°    212.0° 
  ⍝H    20°     68.0° 
  ⍝H    12°     53.6° 
  ⍝H    23°     73.4° 
  ⍝H    ¯2°     28.4° 
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H Example 3: DEBUG/BOX display option (1=⊃⌽⍺)
  ⍝H     ⍝ Displays each field in its own "box" (ignoring null (0-width) fields)
  ⍝H     ⍝ Field:  1..⍬ ⍬  2 3...  4..   ⍬   5 6....
  ⍝H ⎕     1 1 ∆F 'one{}{}{ }two {"two"}{:0}{ }three'  
  ⍝H   ┌→──┐┌→┐┌→───┐┌→──┐┌→┐┌→────┐
  ⍝H   │one││ ││two ││two││ ││three│
  ⍝H   └───┘└─┘└────┘└───┘└─┘└─────┘
  ⍝H     ⍝ Without DEBUG/BOX option.
  ⍝H ⎕     ∆F 'one{}{}{ }two {"two"}{:0}{ }three'   ⍝ Or: 1 0 ∆F ...
  ⍝H   one two two three
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H HELP
  ⍝H ¨¨¨¨
  ⍝H For help, enter  
  ⍝H   ∆F⍨'help'   OR  'help' ∆F ''  
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H A. The ∆F Format String (⍹0)
  ⍝H ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
  ⍝H The format_string is a character vector defining 0 or more 2-D (char matrix) "fields," 
  ⍝H which are executed right to left (as in APL) and assembled into a single matrix 
  ⍝H (with fields top-aligned). Its contents are in "shortcut" variable ⍹0.
  ⍝H
  ⍝H There are 3 types of fields generated: 
  ⍝H    1. Code Fields, 2. Space Fields, and 3. Text Fields.
  ⍝H
  ⍝H A1. Code Fields: 
  ⍝H        radii← 12 2.3 19
  ⍝H ⎕      ∆F ' { Area_Cir←{○⍵×⍵} ⋄ "F8.2" $ radii,⍤¯1⊣ (Area_Cir radii) }' 
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H    Code Fields are dfns and may contain any dfn code, including error handling. 
  ⍝H    Each Code field has implicit right arguments, namely everything passed to ∆F as ⍵ when executed.
  ⍝H 
  ⍝H    Special Variables ⍹0,⍹, etc., used in Code Fields*
  ⍝H    ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨  * Alias ⍵0, ⍵_, etc. See also usage in Space Fields.
  ⍝H       ⍹0, ⍹1, ... ⍵N, denote the scalars in the right arg (⍵) passed to ∆F. 
  ⍝H       ⍹ is the glyph ⎕UCS 9081.
  ⍝H       ⍹0: (0⊃⍵) the format string itself (⎕IO=0).  
  ⍝H       ⍹1: (1⊃⍵) the first scalar after the format string. 
  ⍝H       ⍹N: (N⊃⍵) the Nth scalar after the format string, N one or more digits.
  ⍝H       ⍹:  [⍹ with no digits immed following]
  ⍝H           selects the "next" scalar to the right, starting AFTER the format string with ⍹1.
  ⍝H        ∘  The counter for ⍹ is incremented by 1 just before each use. 
  ⍝H        ∘  The counter for ⍹ is set after each use of ⍹N from left to right in Code Fields in the format string:  
  ⍝H           * If  ⍹N is used in a Code Field, the next ⍹ is ⍹N+1;
  ⍝H           * If more than one  expression ⍹N, ⍹P, ⍹Q appears in any Code Field, 
  ⍝H             the one just before the ⍹ on the left determines its next value (here ⍹Q+1).
  ⍝H        ∘  NB: the initial value of ⍹ is ⍹1, never ⍹0. (⍹0 may only be referenced explicitly).
  ⍝H        ∘  There are easy to type alternatives to using the glyph '⍹' :
  ⍝H           IN PLACE OF            USE
  ⍝H           ⍹0, ⍹1, ... ⍹N         ⍵0, ⍵1, ... ⍵N     e.g. ⍹5×⍹6 ≡ ⍵5×⍵6
  ⍝H           bare ⍹                 ⍵_                 e.g. ⍹+1   ≡ ⍵_+1
  ⍝H        ⍵  What about ⍵ (without any numeric suffix or _)?
  ⍝H           ⍵ by itself is not special, indicating the entire right arg to ∆F (when executed);
  ⍝H           it consists of the scalars ⍹0 ⍹1 ... ⍹N.
  ⍝H 
  ⍝H    {ccc} Code Field Syntax and Quoted Strings
  ⍝H    ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨  
  ⍝H     ccc  any dfn code, including multiple stmts, guards, and error guards.
  ⍝H        ∘ A left brace '{' begins a code field, which is terminated by a balancing right brace '}'.
  ⍝H        ∘ Code ccc is executed and the result is formatted via ⎕FMT.
  ⍝H        ∘ \{ and \}, i.e. braces escaped with backslash (\), do NOT start a code field. 
  ⍝H          They are simple '{' and '}'.
  ⍝H        ∘ To enter quoted strings in Code Fields, use double quotes "like these":
  ⍝H          - {⎕NC "fred"} is easier than {⎕NC ''fred''}
  ⍝H          - In a code field, there are a few escape sequences within double-quoted strings ONLY. 
  ⍝H            Outside of these cases, backslashes (\) are, as in std APL, not special.
  ⍝H               \⋄         indicates a carriage return (⎕UCS 13). It is left as is if MODE=¯1.
  ⍝H               \\⋄        indicates chars '\⋄'
  ⍝H               \{nnn}     indicates* (⎕UCS nnn), where nnn consists of 1 or more digits 
  ⍝H                                     (*) W/o a 2nd preceding backslash; leading/trailing spaces ok. 
  ⍝H               \{nnn-ppp} indicates* unicode chars from nnn to ppp
  ⍝H                          inclusive, where nnn,ppp are 1 or more digits  
  ⍝H                                     (*) W/o a 2nd preceding backslash; leading/trailing spaces ok. 
  ⍝H               \\{nnn}  OR  \\{nnn-mmm}
  ⍝H                     indicates literal string  \{nnn} OR \{nnn-mmm}, i.e. APL text with the extra \ removed.
  ⍝H               Any other variant of \{...} or backslash within strings is kept as ordinary tet:               
  ⍝H                           "\{123+⍳5}" ==> "\{123+⍳5}"   (unchanged, including \);
  ⍝H                           "abc\def"   ==> "abc\def"     (unchanged, including \).
  ⍝H             Examples
  ⍝H             ¨¨¨¨¨¨¨¨
  ⍝H  ⎕               ∆F '"{"\{97-109}...\{57-48}"}"' 
  ⍝H              "abcdefghijklm...9876543210"
  ⍝H                ⍝ In DQ strings, "\⋄" is the same as "\{13}".
  ⍝H  ⎕               ∆F '{"Dogs\⋄Cats"} same as {"Dogs\{13}Cats"}'
  ⍝H              Dogs same as Dogs
  ⍝H              Cats         Cats 
  ⍝H        ∘ To include a double quote (") within a double-quoted string, double it the APL way:
  ⍝H             "abc""def""ghi"  ==>   abc"def"ghi
  ⍝H        In a code field (outside strings)
  ⍝H        ∘ $ is a special symbol for ⎕FMT to allow easy formatting (using the dyadic variant):
  ⍝H             {"F8.2" $ MyCode...}       ⍝ Same as {"F8.2" ⎕FMT MyCode...}
  ⍝H        ∘ $$ (BOX) is a special symbol for the display function (see the DFNS ws), which 
  ⍝H          formats objects in a box:
  ⍝H             { $$ MyCode...} 
  ⍝H        ∘ $$ and Dyadic $ used together may be useful:
  ⍝H             { $$ "F8.2" $ MyCode}    ⍝ $ Formats MyCode then $$ puts in a box.
  ⍝H        ∘ % (OVER) is a special symbol for placing one ⎕FMT-able object "over" another, each centered/padded.
  ⍝H          - Each object is converted to a char. array (if not already), padding if necessary, 
  ⍝H            then the left (⍺) is catenated OVER the right (⍵).
  ⍝H          - The % (OVER) option is useful for titles or for building hierarchical displays without
  ⍝H            doing all the gluing yourself.
  ⍝H          - See the example(s) above.
  ⍝H        ∘ %% (CHAIN) is a special symbol for placing one ⎕FMT-able object to the left of another.
  ⍝H          The objects are not centered, but simply catenated (CHAINed) together.
  ⍝H          CHAIN is also used to build the ∆F formatted object from all the fields (see MODE=¯1). 
  ⍝H        ∘ A Code Field may include limited comments (even though on a single line), 
  ⍝H          beginning with a '⍝' and terminated just before the next '⋄' or '}' on the same line.
  ⍝H          Braces {} (escaped or not), statement ends (⋄) and (double) quotes are 
  ⍝H          not allowed in Code Field comments.
  ⍝H     {ccc →} A Self-documenting Code Field
  ⍝H        A Code Field with a trailing right arrow (→) will generate two fields:
  ⍝H        ∘ the code itself in literal form (incl. spaces and [limited] comments), 
  ⍝H          followed by its evaluated value:
  ⍝H          ∆F'A: {⍪⍳⍵1 → },  B: {⍪⍵2+⍳⍵1 → }' 2 3
  ⍝H          A: ⍪⍳⍵1 → 0,  B: ⍪⍵2+⍳⍵1 → 3
  ⍝H                    1                4
  ⍝H        ∘ Extra blanks and comments are allowed within a Self-documenting Code Field and
  ⍝H          will appear in the output.
  ⍝H ⎕           ∆F'⎕IO={⎕IO}. {⍪⍳⍵1 → ⍝ SIMPLE }  {⍪⍵2+⍳⍵1 → ⍝ FANCY }' 2 3
  ⍝H          ⎕IO=0. ⍪⍳⍵1 → ⍝ SIMPLE 0  ⍪⍵2+⍳⍵1 → ⍝ FANCY 3
  ⍝H                                 1                    4
  ⍝H
  ⍝H A2. Space Fields: 
  ⍝H     {  }  OR { :10: }
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H    Space fields look like Code Fields, except they contain  
  ⍝H         ∘ only 0 or more spaces, or
  ⍝H         ∘ :nn:, i.e. a colon, 0 or more digits, followed by a colon
  ⍝H         ∘ :⍹[N]: or :⍵[N_]:, i.e. a colon, ⍹ or ⍵, followed by digits/underscore, followed by a colon.
  ⍝H    or all together:
  ⍝H         ∘ { [sss] | :[nn]: | :[⍹⍵][N_]: } 
  ⍝H     sss      0 or more spaces               inserts spaces indicated
  ⍝H     nn       zero or more digits            inserts nn spaces. 
  ⍝H     ⍹N etc.  A single special variable      inserts ⍹N at execution time.
  ⍝H              ⍹1, ⍹9, ⍹, ⍵_, ⍵1, ⍵9, etc.    
  ⍝H
  ⍝H     For Numeric or Special Variable Space Fields
  ⍝H     ∘ The colon prefix is required;  the colon suffix is optional.
  ⍝H     ∘ An ill-formed Space Field will be treated as a Code Field, likely triggering an error.
  ⍝H     ∘ Only one special variable is allowed here (i.e. ⍹5 or ⍹, but not ⍹4+⍹5, etc.).
  ⍝H       If you want to do a calculation, simply use a code field: {" "⍴⍨⍹4+⍹5}.
  ⍝H
  ⍝H     A 0-width Space Field {} is handy as a separator between multiline Text Fields (q.v.).
  ⍝H
  ⍝H A3. Text Fields:  
  ⍝H     ∆F 'Any\⋄multiline\⋄text{}Next field!' 
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H    Everything else is a Text Field. Variable names, etc., in text field are just text.
  ⍝H    ∘ Text fields may contain newlines entered as \⋄. Simple ⋄ is not special.
  ⍝H    ∘ To show literal \⋄, enter \\⋄.  
  ⍝H    ∘ To show { or } as text, enter \{ or \}. 
  ⍝H    ∘ In all other cases, simple \ is not special: +\ is simply +\, \d is simply \d.
  ⍝H    ∘ You can use {} to separate Text Fields.
  ⍝H      {} is a 0-width Space Field (see 2. Space Fields above).
  ⍝H      EXAMPLE: 
  ⍝H        Compare these two cases, the first with {} separating 2 multiline Text Fields:
  ⍝H ⎕         ∆F 'One\⋄two{}-Three\⋄-four'  vs    ∆F 'One\⋄two-Three\⋄-four' 
  ⍝H        One-Three                           One
  ⍝H        two-four                            two-Three
  ⍝H                                            -four
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H Differences from Python
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H    ∆F APL-style                             Python
  ⍝H    ¨¨¨¨¨¨¨¨¨¨¨¨                             ¨¨¨¨¨¨    
  ⍝H    ⍝ Build fields all at once L to R        # Build annotations row by row
  ⍝H      RGB←  123 145 255                      R = 123 ; G = 145 ; B = 255
  ⍝H ⎕    ∆F 'R:\⋄G:\⋄B:{ }{⍪RGB}'               print((f'R: {R}\nG: {G}\nB: {B}'))
  ⍝H    R: 123                                   R: 123
  ⍝H    G: 145                                   G: 145
  ⍝H    B: 255                                   B: 255
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨                            ¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H    ⍝ Use APL for base conversions         # Base conversions are built in
  ⍝H ⎕    ∆F '"{"01"[2⊥⍣¯1⊢⍵1]}"' 7              f'{7:b}'
  ⍝H    "111"                                    '111'
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨                            ¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H    ⍝ Formatting Floats old-fashioned?     # Similar approach, different conventions
  ⍝H      x← 20.123                              x = 20.123
  ⍝H ⎕    ∆F'{"F8.5"$x}' ⍝ User calcs width      print(f'{x:0<8}')   # User calcs width
  ⍝H    20.12300                                 20.12300
  ⍝H ⎕    ∆F '{5⍕x}'     ⍝ APL calcs width       print(f'{x:.5f}')   # Python calcs width
  ⍝H    20.12300                                 20.12300
  ⍝H
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H B. ∆F Options:  ⍺[0] (default ⍺[0]=1)  MODE Option
  ⍝H                 ⍺[1] (default ⍺[1]=0)  DEBUG/BOX Option
  ⍝H                 ⍺=⍬                    ∆F FORMATTING SKIPPED
  ⍝H                 ⍺='help'               Show HELP information
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H B1. ∆F has three modes[*], determined by ⍺[0]= 1, 0, or ¯1.
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨       * Ignored if ⍺=⍬ or ⍺='help'
  ⍝H ⍺[0]  MODE Option
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H [1]   ∆F IMMEDIATE MODE
  ⍝H ⍺[0]=1     1 ∆F fs ⍵1 ⍵2 ... ⍵N          ⍝ ⍺=1 is the default
  ⍝H     ∘ Executes the format string fs, implicitly passing any scalars ⍵1...⍵N to 
  ⍝H       the right as arguments.
  ⍝H     ∘ Note: Variables and settings seen are those of the CALLING environment 
  ⍝H       where ∆F is executed.
  ⍝H     ∘ Returns: a char matrix consisting of the fields built per the format and scalars passed.
  ⍝H
  ⍝H [0]   ∆F CODE GENERATION MODE
  ⍝H ⍺[0]=0     0 ∆F fs
  ⍝H     ∘ Generates a code string CS that can be executed (without repeatedly calling ∆F 
  ⍝H       to reparse fs) as 
  ⍝H         (⍎CS) ⍵1 ⍵2 ... ⍵N   or   Dfn←⍎C                ⍝ (⍎CS) or Dfn is an executable dfn...
  ⍝H                                   Dfn ⍵1 ⍵2 ... ⍵N
  ⍝H       where the args ⍵1...⍵n will be combined at EXECUTION time with fs as (fs,⍥⊆⍵1...⍵N), 
  ⍝H         where fs, the format string text originally passed to ∆F, is automatically 
  ⍝H         assigned to ⍹0, as expected.
  ⍝H     ∘ Note: Variable and fn names in Code Fields are resolved in the calling environment 
  ⍝H         when (⍎C) is executed; a different namespace "ns" may be specified via (ns⍎C), 
  ⍝H         a standard feature of execute (⍎).
  ⍝H     ∘ Returns: a char vector representing an executable dfn with results identical to 
  ⍝H         1 ∆F fs ⍹1 ⍹2 ... ⍹N
  ⍝H
  ⍝H [¯1]  ∆F PSEUDOCODE MODE
  ⍝H ⍺[0]=¯1    ¯1 ∆F fs
  ⍝H     ∘ Generates a pseudo-executable P, which is identical to X, except
  ⍝H       - the internally used catenation function is abbreviated to the symbolic function name ⍙CHAIN,
  ⍝H       - newline escapes \⋄ are maintained as \⋄, suppressing
  ⍝H         multiline output, so the pseudocode can be easily inspected.
  ⍝H     ∘ Returns: a char vector of pseudocode.
  ⍝H
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H B2. ∆F has a DEBUG/BOX Option that puts each field into a display box
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H ⍺[1]  DEBUG/BOX (BOX) Option
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H ⍺[1]=0 DEFAULT (NOBOX) Setting
  ⍝H     ∘ Output displayed normally, without extra boxing.
  ⍝H 
  ⍝H ⍺[1]=1 DEBUG/BOX Setting
  ⍝H     ∘ Output is displayed with each field shown within its own box, 
  ⍝H       whether a text, space, or code field.
  ⍝H     ∘ Any null fields generated (0-width) are suppressed, i.e. 
  ⍝H       not shown at all in the output.
  ⍝H     ∘ DEBUG/BOX mode is useful for verifying the expected output format
  ⍝H       is achieved for each input field. 
  ⍝H
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨ 
  ⍝H B3. Simple Options for ⍺
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H ⍺:   ∆F FORMATTING SUPPRESSED
  ⍝H ⍺≡⍬      ⍬ ∆F fs
  ⍝H      Immediately return a shy result of (1 0⍴' '), ignoring right argument.
  ⍝H      Useful when a format stmt ∆F is to be ignored (esp. useful in a Tradfn).
  ⍝H            VOLTAGE CURRENT FREQ← Initialize ⍬
  ⍝H            :FOR STEP :IN 1+⍳ITERATIONS  ⍝ ⎕IO=0
  ⍝H               VOLTAGE CURRENT FREQ← CalcNextStep VOLTAGE CURRENT FREQ 
  ⍝H             ⍝ Show results on STEP 100 200 etc.
  ⍝H ⎕             (1/⍨0=100|STEP) ∆F '[{STEP}] Key Vars: {VOLTAGE→}V, {CURRENT→}A, {FREQ→}Hz.'
  ⍝H            :ENDFOR
  ⍝H         [100] Key Vars: VOLTAGE→240V, CURRENT→20A, FREQ→50Hz.
  ⍝H -----------------------------
  ⍝H ⍺:   Show HELP information
  ⍝H ⎕        'help' ∆F ''  OR ∆F⍨'help'
  ⍝H      Show this HELP information in an ⎕ED editor session, then return ''.
  ⍝H 
  ⍝H PERFORMANCE
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨
  ⍝H As a prototype, ∆F is relatively slow compared to building formatted objects "by hand"
  ⍝H but serviceable enough. Where important, e.g. in loops, you may wish to
  ⍝H scan (compile) the format string before the loop and then run the resulting dfn (here: Fmt1):
  ⍝H
  ⍝H EXAMPLE OF CODE GEN MODE (0 ∆F ...)
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H      ⍝ In a TRADFN                      ⍝ In a DFN
  ⍝H ⎕      Fmt1← ⍎0 ∆F '{...}...{}...{}'      Fmt1← ⍎0 ∆F '{...}...{}...{}' 
  ⍝H        :FOR i :IN ⍳Whatever               _←{ 0=⍵: _←⍺
  ⍝H             ... do stuff ...                  ... do stuff ...
  ⍝H             Fmt1 arg1 arg2 ...                ⎕←Fmt1 arg1 arg2 ⋄ ⍺ ∇ ⍵-1
  ⍝H        :ENDFOR                            }⍨ Whatever
  ⍝H
  ⍝H Tentative Relative ∆F Timings* of Immediate Mode vs Code Gen (Compiled) Mode
  ⍝H ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
  ⍝H                                 COMPILE → CODE STR → DFN → RUN    Rel. Timings
  ⍝H      ∆F fmt ⍵1 ⍵2 ...     100%  |<==========================>|    ⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕
  ⍝H CS←  0 ∆F fmt              85%  |<==============>|                ⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕⎕
  ⍝H DFN← ⍎CS                    4%                   |<=>|            ⎕
  ⍝H DFN ⍵1 ⍵2 ...              11%                       |<=====>|    ⎕⎕⎕
  ⍝H -----------
  ⍝H [*] Test had six fields, exhibiting a range of field types. 
  ⍝H     ∆F strings are typically small in size and number.
  ⍝H
}
