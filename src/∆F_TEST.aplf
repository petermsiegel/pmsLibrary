 ∆F_TEST eachSec
 ;CR;RUN;DONE;END;EXPECT;LET;SAY
 ;RGB;Who;addr;c;hdrC;hdrF;names;x;_
 ;countG;errsG;expectG;matchG;resultG;tripG
 ;⎕PW;⎕IO;⎕ML


 CR←⎕UCS 13
 ⎕PW ⎕IO ⎕ML←100 0 1
 errsG←0
 matchG←0 0
 expectG←resultG←⍬
 countG←0

 ⎕FX'LET IT' '⎕←''>    '',IT' '⍎IT'
 ⎕FX'SAY IT' '⎕←IT'
 ⎕FX'EXPECT IT' 'expectG,←⊂IT' '⎕←IT'

 RUN←{
     expectG∘←resultG∘←⍬
     countG+←1
     expected←'>>> Expected Answer >>>'
     fmt←('[',']',⍨⍕countG),' '

     ⎕←fmt,⍵
     0::_←⎕DL 0.5⊣⎕←↑3⍴⊂expected⊣errsG+←1

     ⎕←resultG∘←⍎⍵
     ⎕←expected
     1:_←⎕DL eachSec
 }

 _←'DONE' ';noM' 'noM←resultG≢↑expectG' 'matchG+←1,noM'
 _,←':IF noM ⋄ ''--- NO MATCH'' ⋄ ⎕DL 1.5' ':ELSE' '''+++ MATCH''⋄:ENDIF'
 _,←'⎕←⍬' 'resultG←expectG←⍬'
 ⎕FX _

 END←{
     ⎕←77⍴'*='
     ⎕←'There were ',(⍕⊃matchG),' ∆F Strings evaluated.'
     ok←1
     ⎕←{
         0=⊃⌽⍵:'ALL ACTUAL ∆F RESULTS MATCH EXPECTED RESULTS.'
         ok⊢←0
         (⊃⌽⍵),' ∆F RESULT(S) FAILED TO MATCH EXPECTED RESULT(S) ',(⍕100×÷/⌽⍵),'%'
     }matchG
     _←{
         0=⍵:''
         ok⊢←0
         ⎕←⍵,' ∆F EXPRESSION EVALUATIONS FAILED.',failure
     }errsG
     ok:⎕←∊3⍴⊂CR,69⍴'SUCCESS SUCCESS SUCCESS'
     ⎕←∊3⍴⊂CR,69⍴'FAILURE FAILURE FAILURE'
 }


 ⍝ --------------------------------------------------------------

 SAY'⍝ This has single and double backslashes before }'
 RUN'∆F''AB\⋄CD\{ONE}\\{⍳2}DONE{⍳2 2}'''
 EXPECT'AB       0 1DONE 0 0  0 1 '
 EXPECT'CD{ONE}\\        1 0  1 1 '
 DONE


 LET'names←↑''John Jones'' ''Mary Smith'' '
 LET'addr←↑'' 1214 Maiden Ln'' '' 24 Hersham Rd'' '

 SAY'⍝ Example 1a:  Text and Code Fields "chained" together horizontally.'
 RUN'∆F''Name: {names}  Addr:{addr}'''
 EXPECT'Name: John Jones  Addr: 1214 Maiden Ln'
 EXPECT'      Mary Smith        24 Hersham Rd'
 DONE

 SAY'⍝ Example 1b:  Self-documenting code expressions {...→} in Code Fields.'
 RUN'∆F''{names→}  {addr→}'''
 EXPECT'names→John Jones  addr→ 1214 Maiden Ln'
 EXPECT'      Mary Smith        24 Hersham Rd'
 DONE


 SAY'⍝ Example 1c:  Titles (using the OVER shortcut %).'
 SAY'⍝ Note that strings in Code Fields {code} use double quotes like "this!".'
 RUN'∆F''{"Name" %names}  {"Address" %addr}'''
 EXPECT'   Name         Address'
 EXPECT'John Jones   1214 Maiden Ln'
 EXPECT'Mary Smith   24 Hersham Rd'
 DONE


 SAY'⍝ Example 1d: Adding a calculated field with line numbers (and one "null" title).'
 SAY'⍝    ↓ Null Title               ⊢→→       Same as (1c)        ←←⊣'
 RUN'∆F''{⍬ %"I1,⊂.⊃"$1+⍳≢names} {"Name" %names}  {"Address" %addr}'''
 EXPECT'      Name         Address'
 EXPECT'1. John Jones   1214 Maiden Ln'
 EXPECT'2. Mary Smith   24 Hersham Rd'
 DONE


 SAY'⍝ Example 2:  Calculations and Formatting in Code Fields ($ is a shortcut for ⎕FMT).'
 SAY'⍝ Assume these declarations:'
 LET'c←100 20 12 23 ¯2'
 LET'C2F←32+1.8∘×           ⍝ Celsius to Fahr.'

 SAY'⍝ Example 2a: Format specification as an argument ⍵1, i.e. (1+⎕IO)⊃⍵.'
 SAY'⍝ (Degree sign (°): ⎕UCS 176)  Result is a 5-row 15-col char matrix.'
 RUN'∆F''{⍵1 $ c}C = {⍵1 $ C2F c}F'' ''I3,⊂°⊃'''
 EXPECT'100°C = 212°F'
 EXPECT' 20°     68°'
 EXPECT' 12°     54°'
 EXPECT' 23°     73°'
 EXPECT' ¯2°     28°'
 DONE

 SAY'⍝ Example 2b: Format specification hard-wired in Code Field.'
 SAY'⍝ Note alternative way to enter degree sign ''°'' as Unicode 176: "\u{176}".'
 RUN'∆F''{"I3,⊂°⊃"$ c}C = {"F5.1,⊂\u{176}⊃"$ C2F c}F'''
 EXPECT'100°C = 212.0°F'
 EXPECT' 20°     68.0°'
 EXPECT' 12°     53.6°'
 EXPECT' 23°     73.4°'
 EXPECT' ¯2°     28.4°'
 DONE

 SAY'⍝ Example 2c: Variant on (2b) with a header for each Code field using the % (OVER) shortcut.'
 LET'hdrC←''Celsius'''
 LET'hdrF←''Fahren.'''
 RUN'∆F''{hdrC %"I3,⊂°⊃"$c}  {hdrF%"F5.1,⊂°⊃"$C2F c}'''
 EXPECT'Celsius  Fahren.'
 EXPECT' 100°    212.0°'
 EXPECT'  20°     68.0°'
 EXPECT'  12°     53.6°'
 EXPECT'  23°     73.4°'
 EXPECT'  ¯2°     28.4°'
 DONE

 SAY'⍝ Example 3a: BOX display option (1=⊃⌽⍺).'
 SAY'⍝ Displays each field in its own "box" (ignoring null (0-width) fields)'
 RUN'1 1 ∆F''one{}{}{ }two  {"three"}{:3}four.'''
 EXPECT'┌→──┐┌→┐┌→────┐┌→────┐┌→──┐┌→────┐'
 EXPECT'│one││·││two··││three││···││four.│'
 EXPECT'└───┘└─┘└─────┘└─────┘└───┘└─────┘'
 DONE

 SAY'⍝ Example 3b: (3a) without the BOX option (0=⊃⌽⍺).'
 RUN'∆F''one{}{}{ }two  {"three"}{:3}four.'''  ⍝ Or: 1 0 ∆F ...'
 EXPECT'one two  three   four.'
 DONE

 SAY'⍝ Example 4a: Use of ⍹ to reference the next scalar in right argument ⍵.'
 SAY'⍝   ⍝             ⍹1≡1⊃⍵       ⍹2≡2⊃⍵                (⎕IO←0)'
 RUN'∆F''{"Name" %⍹} {"Addr"%⍹}'' ''J. Smith'' '' 24 Broad Ln'' '
 EXPECT'  Name       Addr'
 EXPECT'J. Smith  24 Broad Ln'
 DONE

 SAY'⍝ Example 4b: Interaction of ⍹N and simple ⍹.'
 RUN'∆F''{⍹5 ⍹} {⍹3 ⍹} {⍹1 ⍹}'' 1 2 3 4 5 6 '
 EXPECT'5 6 3 4 1 2'
 DONE


 RUN'∆F''πr²={pi←○1 ⋄ r←2 ⋄ pi×r×2}'''
 EXPECT'πr²=12.56637061'
 DONE

 RUN'∆F''π={"F10.8"$○1}!'''
 EXPECT'π=3.14159265!'
 DONE

 RUN'∆F'' 1 SP="{}",5 SP="{:5:}"'''
 EXPECT' 1 SP="",5 SP="     "'
 DONE

 RUN'∆F''This is a\⋄three-line\⋄field!'''
 EXPECT'This is a'
 EXPECT'three-line'
 EXPECT'field!'
 DONE

 RUN'∆F''<{"\U{97-108}...\U{57-48}"}>'''
 EXPECT'<abcdefghijkl...9876543210>'
 DONE

 LET'Who←↑''Mary'' ''Captain'''
 RUN'∆F''Name:\⋄Rank:{ }{Who}'''
 EXPECT'Name: Mary'
 EXPECT'Rank: Captain'
 DONE

 LET'Who←↑''Mary'' ''Captain'''
 RUN'∆F''Name:\⋄Rank:{} {Who}'''
 EXPECT'Name: Mary'
 EXPECT'Rank: Captain'
 DONE

 LET'Who←↑''Mary'' ''Captain'''
 RUN'∆F''Name:\⋄Rank:{:5:}{Who}'''
 EXPECT'Name:     Mary'
 EXPECT'Rank:     Captain'
 DONE

 LET'Who←↑''Mary'' ''Captain'''
 RUN'∆F''Name:\⋄Rank:{:⍵1:}{Who}'' 5 '
 EXPECT'Name:     Mary'
 EXPECT'Rank:     Captain'
 DONE

 SAY'⍝ APL vs Python!'
 SAY'⍝ APL                                 # Python'
 SAY'⍝ Build fields all at once L to R     # Build annotations row by row'
 LET'RGB←123 145 255                    ⍝    R = 123 ; G = 145 ; B = 255'
 RUN'∆F''R:\⋄G:\⋄B:{ }{⍪RGB}''          ⍝    print((f''R: {R}\nG: {G}\nB: {B}''))'
 EXPECT'R: 123' ⍝  R: 123    # Python'
 EXPECT'G: 145' ⍝  G: 145    # Python'
 EXPECT'B: 255' ⍝  B: 255    # Python'
 DONE

 SAY'⍝ Use APL for base conversions, etc.  # Base conversions are built in'
 RUN'∆F ''''''{"11"[2⊥⍣¯1⊢⍵1]}'''''' 7 '         ⍝     f''{7:b}'''
 EXPECT'''111'''                                 ⍝ ''111''        # Python'
 DONE

 SAY'⍝ Formatting Floats old-fashioned?    # Similar approach, different conventions'
 LET'x←20.123'                           ⍝     x = 20.123'
 RUN'∆F''{"F8.5"$x}'''   ⍝ Usr calcs width ⍝     print(f''{x:0<8}'')   # User calcs width'
 EXPECT'20.12300'                            ⍝  20.12300   # Python'
 DONE

 RUN'∆F''{5⍕x}'''⍝ APL calcs width ⍝     print(f''{x:0.5 f}'')   # Python calcs width'
 EXPECT' 20.12300'                      ⍝  20.12300   # Python'
 DONE

 END 0
