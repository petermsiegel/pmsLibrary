∆F←{ ⍝ Simple format string function.
     ⍝   ∆F 'format_string'  [⍵1 [⍵2 [... ⍵N]]]
     ⍝ Works by creating 0 or more 2-D (Char Matrix) "fields," which are executed  
     ⍝ left to right and assembled into a single matrix (with fields top-aligned).
     ⍝ There are 3 types of fields: 
     ⍝    Code Fields, Space Fields, and simple Text Fields.
     ⍝
     ⍝ 1. Code Fields
     ⍝    Code Fields are essentially dfns and may contain any dfn code, including
     ⍝    error handling. Each Code field has implicit right arguments:
     ⍝       ⍹0, ⍹1, etc., depending on the number of scalars passed to ∆F.
     ⍝       ⍹0: the format string itself. It may only be referenced explicitly.
     ⍝       ⍹1: the first scalar after the format string. It must be present if referenced.
     ⍝       ⍹N: the Nth scalar. Ditto.
     ⍝       ⍹:  (no digits following)
     ⍝           the "next" scalar, starting first with ⍵1 (NOT ⍵0).
     ⍝        -  As an alternative, ⍵0, ⍵1, ..., ⍵N may be used.
     ⍝        -  In place of ⍹, ⍵_ may be used. 
     ⍝           (⍵ has its usual interpretation: all items ⍵0 ⍵1 ... ⍵N)
     ⍝    {ccc} Code Field  
     ⍝     ccc: any dfn code
     ⍝        - Code ccc is executed and result is formatted via ⎕FMT.
     ⍝        - \{ and \} do not indicate code fields (see Text Fields).
     ⍝        - To enter quoted strings in code, use double quotes "like these":
     ⍝             {⎕NC "fred"} is easier than {⎕NC ''fred''}
     ⍝        - To include in a string, enter the APL way:
     ⍝             "abc""def""ghi"  ==>   abc"def"ghi
     ⍝        - $ is a special symbol for ⎕FMT to allow easy formatting:
     ⍝              "F8.2" $ MyCode
     ⍝ 2. Space Fields
     ⍝    {sss|:nn:} Space Field 
     ⍝     sss: 0 or more spaces, inserts spaces indicated
     ⍝     nn   a positive number, inserts nn spaces
     ⍝        - A 0-length space field {} is handy when separating Text Fields (see below).
     ⍝ 3. Text Fields
     ⍝    Everything else is a Text Field
     ⍝     ...       Text Field
     ⍝          Text fields may contain newlines as \⋄. Simple ⋄ is not special.
     ⍝          To show \⋄, enter \\⋄.  To show { or }, enter \{ or \}. 
     ⍝          In all other cases, simple \ is not special: +\ is simply +\.
     ⍝        - Using {} to separate Text Fields.
     ⍝            ∆F 'One\⋄two{}-Three\⋄-four'   vs    ∆F 'One\⋄two-Three\⋄-four'
     ⍝          One-Three                            One
     ⍝          two-four                             two-Three
     ⍝                                               -four
    ⍺←1
    ⍺((⊃⎕RSI){ 
      ⍺≠1: ⍵ ⋄ 0:: ⎕SIGNAL/⎕DMX.((EM,(0≠≢Message)/': ',Message) EN) 
      ⍺⍺⍎⍵,'⍵⍵'⊣⍵⍵ 
    }(⊆⍵))⍺{
      ⍝ Code for matrix self-aligning catenation function (Çæt)
        ⍙⍙def ← '⊃{⊃,/⍺ ⍵↑⍨¨⌈⍥≢/⍺ ⍵}⍥⎕FMT/'
        ⍙⍙nm←   '⊃Çæt/'
      ⍝ Simple Declarations
        SQ←'''' 
      ⍝ Patterns for ProcCSFields 
        dqP←      '(("[^"]*")+)' 
        sqP←      '((''[^'']*'')+)' 
        dolP←     '(?<!\\)\$'
        omegaNP←  '[⍵⍹](\d+)'        ⍝ ⍹1, ⍹5, OR ⍵5, ⍵1.  ⍹0 or ⍵0 refers to the source Format string (0⊃⍵).
        omega0P←  '⍵_|⍹_?'           ⍝ ⍹ or ⍵_ means "next ⍹N". It always starts at ⍹1, i.e. skipping the source Format str.
        comP←     '⍝[^}⋄]+'          ⍝ comment (limited):  ⍝ up to just before stmt end ⋄ or closing }
      
      ⍝ PCRE Patterns ...
      ⍝ {} w/o spaces is a null field, useful for separating Text Fields...
        space0P←  '{}'                     
        space1P←  '(?x) \{ (\s*)       (\s* (→\s*)? (⍝[^}⋄]*|\s*)? ) \}'
        space2P←  '(?x) \{ \s*:(\d+):? (\s* (→\s*)? (⍝[^}⋄]*|\s*)? ) \}'
        braceP←   '(?x) (?<P> (?<!\\) \{ (?>  [^{}"⍝\\]+ | (?:\\.)+ | (?:"[^"]*")+ | ⍝[^}⋄]* | (?&P)* )+  \} )' 
      ⍝ Misc Util
        TrimR←         {⍺←' ' ⋄ ⍵↓⍨-+/∧\⍺∊⍨⌽⍵}
        RemNullFields← ⊢(/⍨)(0∘≠≢¨)  
        SQQot←         {' ',SQ,SQ,⍨⍵/⍨1+SQ=⍵}

      ⍝ Main Processing Routines
      ⍝ Setup...
        ⋄ crAsis← '\r'   '\\⋄'  ⊃⍨⍺=¯1                         ⍝ Leave '\⋄' as is, if ⍺=¯1
        TFEsc←    '(?<!\\)\\⋄'  '\\([{}\\])' ⎕R crAsis '\1'    ⍝ Escapes in a Text field
        DQEsc←    '(?<!\\)\\⋄'  '\\(\\⋄)'    ⎕R crAsis '\1'    ⍝ Escapes in a DQ string in a Code field.
   
      ⍝ Process Text Fields
        ProcTFields←  SQQot  TFEsc 
        
      ⍝ Process Code and Space Fields
        ⋄ omegaInc←0
        ProcCSFields←  {
            fld←  dqP sqP dolP omegaNP omega0P comP ⎕R {
                  Case← ⍵.PatternNum∘∊
                  Fld← ⍵.{Lengths[⍵]↑Offsets[⍵]↓Block}
                  Case 0: SQQot DQEsc 1↓¯1↓Fld 0
                  Case 1: Fld 0
                  Case 2: ' ⎕FMT '
                  Case 3: '(⍵⊃⍨',(⍕⊃⌽⎕VFI Fld 1),')'
                  Case 4: '(⍵⊃⍨',(⍕omegaInc),')' ⊣ omegaInc+←1
                  Case 5: ''
            } 1↓¯1↓⍵    ⍝ Remove { and }
          ⍝ Right arrow → sets "Documentation mode" for Code and Space Fields
            tr← ' ⋄'TrimR fld   ⍝ We ignore trailing ⋄ and blanks when checking for a trailing → symbol
            '→'= ¯1↑tr: (' ', SQQot ⍵,' ') (' ({',( ¯1↓tr ),'}⍵)')
            '({',fld,'}⍵)' 
        }
        
      ⍝ Process all fields by type
        ProcFieldsByType← { '{'≠1↑⍵: ProcTFields ⍵ ⋄  ProcCSFields   ⍵ }

      ⍝ Divide format string into fields, "converting" space fields to code fields
        ⋄ divIn←   space0P   space1P          space2P            braceP 
        ⋄ divOut←  '\r'      '\r{''\1''\2}\r' '\r{\1⍴'' ''\2}\r' '\r\0\r'
        FString2Fields← RemNullFields divIn ⎕R divOut
        
      ⍝ Executive
        preamble←   ⍙⍙nm ⍙⍙def⊃⍨ ⍺≠¯1
      ⍝ Postamble: Add dummy field if only one field. Resolves cases with single field returning 0⍴⊂''.
        Postamble← {⍵,'⍬'/⍨1=≢⍵}
        '{','}',⍨ ∊ preamble, Postamble ProcFieldsByType¨ FString2Fields ⊆⊃⍵
    }⊆⍵ 
}
 