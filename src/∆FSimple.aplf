∆F←{ ⍝ Simple format string function
    ⍺←1
    ⍺((⊃⎕RSI){ 
      ⍺≠1: ⍵ ⋄ 0:: ⎕SIGNAL/⎕DMX.(EM EN) 
      ⍺⍺⍎⍵,'⍵⍵'⊣⍵⍵ 
    }(⊆⍵))⍺{
      ⍝ Code for matrix self-aligning catenation function (Çæt)
        ⍙⍙def ← '⊃{⊃,/⍺ ⍵↑⍨¨⌈⍥≢/⍺ ⍵}⍥⎕FMT/⊆'
        ⍙⍙nm←   '⊃Çæt/⊆'
      ⍝ Simple Declarations
        SQ←'''' 
      ⍝ Patterns for ProcCSFields 
        dqP←      '(("[^"]*")+)' 
        sqP←      '((''[^'']*'')+)' 
        dolP←     '(?<!\\)\$'
        omegaNP←  '[⍵⍹](\d+)'        ⍝ ⍹1, ⍹5, OR ⍵5, ⍵1.  ⍹0 or ⍵0 refers to the source Format string (0⊃⍵).
        omega0P←  '⍵_|⍹_?'           ⍝ ⍹ or ⍵_ means "next ⍹N". It always starts at ⍹1, i.e. skipping the source Format str.
        comP←     '⍝[^}⋄]+'          ⍝ comment (limited):  ⍝ up to just before stmt end ⋄ or closing }
      
      ⍝ PCRE Patterns ...
      ⍝ {} w/o spaces is a null field, useful for separating Text Fields...
        space0P←  '{}'                     
        space1P←  '(?x) \{ (\s*)       (\s* (→\s*)? (⍝[^}⋄]*|\s*)? ) \}'
        space2P←  '(?x) \{ \s*:(\d+):? (\s* (→\s*)? (⍝[^}⋄]*|\s*)? ) \}'
        braceP←   '(?x) (?<P> (?<!\\) \{ (?>  [^{}"⍝\\]+ | (?:\\.)+ | (?:"[^"]*")+ | ⍝[^}⋄]* | (?&P)* )+  \} )' 
      ⍝ Misc Util
        TrimR←         {⍺←' ' ⋄ ⍵↓⍨-+/∧\⍺∊⍨⌽⍵}
        RemNullFields← ⊢(/⍨)(0∘≠≢¨)  
        SQQot←         {' ',SQ,SQ,⍨⍵/⍨1+SQ=⍵}

      ⍝ Main Processing Routines
      ⍝ Setup...
        ⋄ crAsis← '\r'   '\\⋄'  ⊃⍨⍺=¯1                         ⍝ Leave '\⋄' as is, if ⍺=¯1
        TFEsc←    '(?<!\\)\\⋄'  '\\([{}\\])' ⎕R crAsis '\1'    ⍝ Escapes in a Text field
        DQEsc←    '(?<!\\)\\⋄'  '\\(\\⋄)'    ⎕R crAsis '\1'    ⍝ Escapes in a DQ string in a Code field.
   
      ⍝ Process Text Fields
        ProcTFields←  SQQot  TFEsc 
        
      ⍝ Process Code and Space Fields
        ⋄ omegaInc←0
        ProcCSFields←  {
            fld←  dqP sqP dolP omegaNP omega0P comP ⎕R {
                  Case← ⍵.PatternNum∘∊
                  Fld← ⍵.{Lengths[⍵]↑Offsets[⍵]↓Block}
                  Case 0: SQQot DQEsc 1↓¯1↓Fld 0
                  Case 1: Fld 0
                  Case 2: ' ⎕FMT '
                  Case 3: '(⍵⊃⍨',(⍕⊃⌽⎕VFI Fld 1),')'
                  Case 4: '(⍵⊃⍨',(⍕omegaInc),')' ⊣ omegaInc+←1
                  Case 5: ''
            } 1↓¯1↓⍵    ⍝ Remove { and }
          ⍝ Right arrow → sets "Documentation mode" for Code and Space Fields
            tr← ' ⋄'TrimR fld   ⍝ We ignore trailing ⋄ and blanks when checking for a trailing → symbol
            '→'= ¯1↑tr: (' ', SQQot ⍵,' ') (' ({',( ¯1↓tr ),'}⍵)')
            '({',fld,'}⍵)' 
        }
        
      ⍝ Process all fields by type
        ProcFieldsByType← { '{'≠1↑⍵: ProcTFields ⍵ ⋄  ProcCSFields   ⍵ }

      ⍝ Divide format string into fields, "converting" space fields to code fields
        ⋄ divIn←   space0P   space1P          space2P            braceP 
        ⋄ divOut←  '\r'      '\r{''\1''\2}\r' '\r{\1⍴'' ''\2}\r' '\r\0\r'
        FString2Fields← RemNullFields divIn ⎕R divOut
        
      ⍝ Executive
        preamble←   ⍙⍙nm ⍙⍙def⊃⍨ ⍺≠¯1
        '{','}',⍨ ∊ preamble, ProcFieldsByType¨ FString2Fields ⊆⊃⍵
    }⊆⍵ 
}
 