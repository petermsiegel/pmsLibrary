∆FIX←{   
  ⍺←1
  DEBUG←1  ⋄   ⎕IO← 0   
  ⍝ _←(DEBUG/283+⍳5) ⎕STOP ⊃⎕XSI
⍝    SQMULTI_ALLOW=0:  Do not allow single-quote strings to extend over multiple lines.
⍝    SQMULTI_ALLOW=1:  As for double-quoted strings, allow single-quote strings to extend over multiple lines.
  SQMULTI_ALLOW←1
  0/⍨~DEBUG:: ⎕SIGNAL/⎕DMX.(EM EN)

⍝_←(DEBUG/16+⍳22) ⎕STOP ⊃⎕XSI
⍝ Include:
⍝   If ⍵ is a filename (char vector), process the file contents.
⍝   Otherwise, process the lines.
⍝   Inserts pseudo-macro line:  ::FILE fname
⍝ Returns a vector of lines (char vectors)
  Include←{
      ⍺←⍬
      includeOnce←⍬
      curFis←⊂'[TERM]'
      ScanFi←{
        fn←⍵
        curFis,← ⊂fn
        ⍺ ScanLn ⊆⊃⎕NGET fn 1 
      }
      ScanLn←{
          0=≢⍵: ⍺ ⊣ curFis↓⍨← ¯1
          lns←⍺ 
          w0←⊃⍵
          inclFn← ×≢fnVV← includeP ⎕S '\1'⊣w0
          inclFn: ⍺{ lns←⍺ ⋄ fn←⊃fnVV
              (⊂fn)∊includeOnce: (lns,⊂'⍝ ',w0,' (already)') ScanLn 1↓⍵
              (lns,⊂'::FILE ',fn ) ScanLn (⍬ ScanFi fn),1↓⍵  
          }⍵
          inclFiOnce← ×≢pragmaP  ⎕S 0⊣w0
          inclFiOnce: (⍺,⊂'⍝ ',w0) ScanLn 1↓⍵  ⊣ includeOnce,←⊂⊃⌽curFis 
          (⍺,⊂w0) ScanLn 1↓⍵
      }
    ⍝ Is ⍵ a simple filename? 
    ⍝ If so, include it (ScanFi)...
      1≥|≡⍵: (⍺,⊂'::FILE ',⍵) ScanFi ⍵ 
    ⍝ If not, scan line by line
      ⍺ ScanLn ⍵
  }  
  includeP← '(?i)^\h*:include\h+(?|''([^''\n]+)''|"([^"\n]+)"|([^\h\n]+))' 
  pragmaP←  '(?i)^\h*:pragma\h+once\b'
 

⍝ CONSTANTS
  SQ DQ LP RP←'''"()' 
  CR NL←⎕UCS 13 10 
  DQ2←DQ,DQ
  QSEP←SQ,' ',SQ       ⍝ QSEP: Separates Two Quote Strings 
  OPTS←('UCP' 1)('Mode' 'M')('EOL' 'LF')('IC' 1)

⍝ Utility Fns 
⍝ Fld: Return value of numbered field of ⎕R namespace or '', if it is undefined.
  Fld← { fO fB fL←⍺.(Offsets Block Lengths) ⋄ 0≠0(≢fO)⍸⍵: '' ⋄ ¯1=wO←⍵⌷fO: ¯1 ⋄ (⍵⌷fL)↑wO↓fB }
  AddSQs←     { SQ,SQ,⍨∊(⊂QSEP)@(NL∘=)⊢⍵ }            ⍝ Add single quotes to each quoted string...
  DQ2SQ←      { {⍵/⍨DQ2(~⍷)⍵}(⍵/⍨1+SQ=⍵) }            ⍝ Internal double quotes to single quotes 
  CondParens← { ⍺: Parens ⍵ ⋄ ⍵ }
  CondQuotes← { ⍺: Quotes ⍵ ⋄ ⍵ }
  CondEval←   { 0:: '' ⋄ ⍺: ⍕ ⍎⍵ ⋄ ⍵ }
  Parens←      LP∘,,∘RP
  Quotes←     (SQ∘,,∘SQ)(⊢⊢⍤/⍨1+SQ∘=)
  DTB←        {⍵↓⍨-+/∧\⌽⍵=' '}    
  HandleNL←   { 2≤⍴⍴⍵: ∊∇¨(⎕FMT ⍵),NL  ⋄ '\\⋄' ⎕R '\n' ⊣⍵ }
  Strip1LR←   1↓¯1↓⊢
⍝ Strip trailing blanks from lines of multiline strings...
  StripTB←    { NL(~∊)⍵: ⍵ ⋄ ' *\n'  ⎕R  '\n'  ⍠OPTS ⊢⍵ } 

⍝ Regexp Alignment Fns 
⍝ AlignLeft: No Leading Blanks...
  AlignLeft←  '\n *' ⎕R '\n' ⍠OPTS
⍝ AlignMarg: In a multiline string, 
⍝            - Ignore an initial bare line (one followed by zero or more blanks),
⍝              but respect a non-bare line.
⍝            - Each line after initial line are aligned to the first such line.
⍝            - Final bare newline is NOT ignored.
⍝ Example:
⍝ ⍝   ↓←←←← left margin
⍝     a←"
⍝       one
⍝       two
⍝          three
⍝       "  ⍝ done
⍝     ↑0 ∆FIX 'a←"' '  one'  '  two'  '   three' '"  ⍝ done'
⍝   a←('one' 'two' '   three' '')  ⍝ done
⍝   ┌───┬───┬────────┬┐
⍝   │one│two│   three││
⍝   └───┴───┴────────┴┘

  AlignMarg← {
    isFirst margin skipNL1← 1 0 0
    ⍝ Initial bare newline is ignored...
    ⍝ Set left margin from first "full" line and align following with that.
      '\A(?=\n)' '\n( *)' ⎕R {
          0=⍵.PatternNum: '' ⊣ skipNL1⊢←1                    ⍝ We skip newline at <isFirst>
          nsp← ≢⍵ Fld 1
          isFirst: skipNL1↓NL ⊣ isFirst margin⊢← 0 nsp       ⍝ Set margin 
          NL,' '⍴⍨0⌈margin-⍨nsp                              ⍝ Align with margin         
      }⍠OPTS ⊢ ⍵ 
  }

⍝ Dictionary...
  ∆DICT←{ 
      K V←⍵
    ⍝ Get: Returns value in whatever type was stored
      NNULL←,⎕NULL     ⍝ See Get 
    ⍝ Get:   [⍺: default] ∇ key
    ⍝    ⎕NULL is a valid left arg. ,⎕NULL means "no left arg".
    ⍝    Default for key is <key>, unless ⍺ is specified.
      Get←{ 
          ⍺←  NNULL
          k1← 1 ⎕C⍣('⎕'=⍬⍴⍵)⊢⍵ 
          p←  K⍳⊂k1  ⋄ p=≢K: (⍺≡NNULL)⊃ ⍺ ⍵ ⋄ p⊃V
      }
    ⍝ Set: Does NOT convert numeric values to string s
      Set←{ k1 v1←⍵
          k1←1 ⎕C⍣('⎕'=⍬⍴k1)⊢k1 
          p←K⍳⊂k1
          p=≢K: v1⊣K,←⊂k1 ⊣ V,←⊂v1
          ⊢(p⊃V)←v1 
      }
      Del←{
          k1←1 ⎕C⍣('⎕'=⍬⍴k1)⊢k1 
          p←K⍳⊂k1
          p=≢K: ⍵
          q←p≠⍳≢K ⋄ K⊢←q/K ⋄ V⊢←q/V
          ⍵
      }
      ⎕NS  'K' 'V' 'Get' 'Set' 'Del' 'NNULL'
  }
⍝ GenBracePat '{}' etc.
⍝ Matches recursive balanced left and right "braces" passed as ⍵[0] and ⍵[1].
  GenBracePat←{
        ⎕IO←0 ⋄ ⍺←⎕A[,⍉26⊥⍣¯1⊢ ⎕UCS ⍵] ⋄ Nm←⍺  ⍝ ⍺ a generated unique name based on ⍵
        Lb Rb←⍵,⍨¨⊂'\\'                     
        pM←'(?: (?J) (?<Nm> Lb  (?> [^LbRb''"⍝]+ | ⍝\N* | (?: "[^"]*")+  | (?:''[^'']*'')+ | (?&Nm)* )+ Rb))'~' '
        'Nm' 'Lb' 'Rb'⎕R Nm Lb Rb⊣pM
  }  
⍝ SQ strings: 
  sqP←        1⊃ '(''[^''\n]*'')+' '(''[^'']*'')+'         
  dqP←       '("[^"]*")+'              ⍝ DQ strings: multi-line quotes allowed.
⍝ qtErrP: For a bad quote, match (and report) only to end of current line, not end of multi-line object...
  qtErrP←    '[''"][^''"\n]*$'    
  comP←      '⍝[^\n]*$'
  numP←      '¯?[\d\.][\d\.EeJj¯]*'    ⍝ Permissive; APL to handle bad numbers. 
  nlP←       '\n'
  miscP←     '[^''"⍝\n]+'
  sinkP←     '((?:^|[[{(⋄:;\n])\h*)←' 
  tempP←     '⎕T\b'
  _w←        '[\w∆⍙]'
  _w0←       '[⎕\w∆⍙](?<![\d¯])'
  _wordP←     _w0,_w,'*(?:\.',_w0,_w,'*)*'
  wordP←      Parens _wordP
  quotLftP←   '(?|(?<='')|',wordP,')\h*→'
  quotRgtP←   '`\h*(?|(?='')|',wordP ,')'
  quotRgtErrP←'`'    
⍝ :DEF (with optional additive suffixes E, L, and/or Q)
⍝   Allows :DEF name← value  AND   :DEF name value
⍝   E: Execute, L: Literal, Q: Quote after E or L (or both)
  defP←       '^\h*:DEF([ELQ]*)\h(?|([^←\n]+)←|([^\h\n←]+)\h)(.*)$'
  undefP←     '^\h*:UNDEF\h+([^\s\n]+)\h*(.*)$'
  parenP←     GenBracePat '()'
  brackP←     GenBracePat '[]'
⍝ :DECLare
⍝ Allows only:   :DECLare name←value
  declareP←   '^\h*:(?:DECLARE|DECL)\h([^←]+)←\h*((?:',parenP,'|',brackP,'|[^[({\n]+)*)$'
⍝ fileIdP matches 
⍝    ::FILE name   OR  ::FILE "name"   OR  ::FILE 'name'
⍝ Final \n: consume the newline to skip __LINE__ increment below...
  fileIdP←'^\h*::FILE\h+(?|''([^''\n]+)''|([^\h\n]+)).*\n'   
 
  Scan4Strings← sqP dqP qtErrP comP nlP miscP ⎕R { 
        sqI dqI qtErrI←   0 1 2
        CASE← ⍵.PatternNum∘∊
        f0← ⍵ Fld 0
      ⍝ SQ strings are by definition aligned LEFT and a bare quote on the first line starts the first quote line.
      ⍝ See AlignLeft for details.
        CASE sqI:  { 
            multi←NL∊f0
            res← multi∘CondParens AddSQs AlignLeft StripTB Strip1LR f0
            SQMULTI_ALLOW ∨ ~multi: res 
            qtE←'∆FIX QUOTE ERROR: Use doublequotes ("...") for multi-line strings:'
            11 ⎕SIGNAL⍨qtE,CR,'[Line] ',res 
        } ⍬
      ⍝ DQ strings are by definition aligned such that a bare first line of the quote is ignored, and
      ⍝ each line is aligned with the first full line which establishes the left margin.
      ⍝ See AlignMarg for details.
        CASE dqI:  (NL∊f0)∘CondParens AddSQs AlignMarg StripTB DQ2SQ Strip1LR f0
        CASE qtErrI: 11 ⎕SIGNAL⍨'∆FIX QUOTE ERROR: No matching quote found:',CR,f0,'...' 
      ⍝ ELSE...
        f0 
  } ⍠OPTS  

  macroPList← sqP comP numP defP undefP declareP wordP nlP fileIdP
  Scan4Macros← macroPList ⎕R {
      sqI comI numI defI undefI declareI wordI nlI fileIdI← ⍳≢macroPList
      CASE← ⍵.PatternNum∘∊
      f0← ⍵ Fld 0 
    ⍝ fileId: Special internal directive that doesn't increase __LINE__
      CASE fileIdI: ''⊣ MACROS.Set '__FILE__'  (' ',' ',⍨Quotes ⍵ Fld 1)
    ⍝ __LINE__ dictionary value is an integer ≥1.
      _← MACROS.Set '__LINE__'  ((+/NL=f0)+1 MACROS.Get '__LINE__') 
      CASE sqI comI numI: f0 
      f1←⍵ Fld 1 
      CASE wordI:  Scan4Words f1 
      CASE nlI:    f0           ⍝ Just needed to count __LINE__ 
      CASE defI:   { f2 f3← ⍵ Fld¨ 2 3
          ¯1=⎕NC f2~'⎕': 11 ⎕SIGNAL⍨ 'XFIX :DEF ERROR: Invalid object name: "',f2,'"',CR,'[Line] ',f0
          hasVal←    ×≢f3~' '
          isQuo←                      'Q'∊f1    ⍝ DEFQ and variants (mix of suffixes QLE)
          notLit←   ~isQuo ∨ hasVal ∧ 'L'∊f1    ⍝ DEFL and variants        ...
          isEval←            hasVal ∧ 'E'∊f1    ⍝ DEFE and variants        ...
           '⍝ ',f0 ⊣ MACROS.Set f2 (HandleNL Parens∘DTB⍣notLit⊣ isQuo CondQuotes isEval CondEval Scan4Words f3)
      } ⍵
      CASE undefI: { f2← ⍵ Fld 2
          ¯1=⎕NC f1~'⎕': 11 ⎕SIGNAL⍨'XFIX :UNDEF ERROR: Invalid object name: "',f1,'"',CR,'[Line] ',f0
          extra←×≢f2
          extra: 11 ⎕SIGNAL⍨'XFIX :UNDEF ERROR: Trailing text not allowed: "',f2,'"',CR,'[Line] ',f0 
          '⍝ ',f0 ⊣ MACROS.Del f1 
      } ⍵
      f2←⍵ Fld 2
      CASE declareI:  { nbsp←⎕UCS 160
        com← '\A' '\n' ⎕R '⍝ ' ('\n⍝',10⍴nbsp)⍠OPTS⊢f0
        scn← f1,'←',0 ⎕SE.Dyalog.Array.Deserialise  Scan4Words f2
        com,NL,scn
      } ⍵ 
  } ⍠OPTS 

  Scan4Words←{
      swReplCount swReplMax← 1 20
      swErrCount  swErrMax←  0  1

      ProcWords← sqP comP numP wordP ⎕R {
        wordI← 3

        ⍵.PatternNum≠wordI:  ⍵.Match    
      ⍝ Convert numberic value to string...
        old≡new← ⍕MACROS.Get (old←⍵.(Lengths[1]↑Offsets[1]↓Block)): new 
        swReplCount+← 1
        swReplMax≥swReplCount: ProcWords new 
        new {
          swErrCount+← 1
          swErrMax<swErrCount: ⍺ 
          ⎕←'>> XFIX MACRO WARNING: Replacement loop may not terminate: :DEFL ',⍵,' ',⍺
          ⍺ 
        } old 
      } ⍠OPTS

      ProcWords ⍵
  }

⍝ Scan4Specials: 
⍝ processes...
⍝   Fns
⍝    dyadic  quote left   →  
⍝    monadic quote right  `
⍝    monadic sink         ←
⍝  system variable
⍝    sink name            ⎕T 
  tempsN←¯1
  specialPList← sqP comP numP sinkP tempP quotLftP quotRgtP quotRgtErrP 
  Scan4Specials← specialPList ⎕R { 
        sqI comI numI sinkI tempI quotLftI quotRgtI quotRgtErrI ← ⍳≢specialPList
        CASE←⍵.PatternNum∘∊
        CASE sqI comI numI: ⍵ Fld 0
        nm←'⍙T' 
        CASE sinkI:{
            f1← ⍵ Fld 1
            tempsN⊢←⊢ tempsN+1
            f1,nm,(⍕tempsN),'←' 
        } ⍵
        CASE tempI: {
          tempsN<0: 11 ⎕SIGNAL⍨'XFIX ⎕T ERROR: Premature use of ⎕T. No sink value  set.'
          nm, ⍕tempsN
        } ⍬
        CASE quotLftI quotRgtI: (CASE quotLftI){
              bare← 0≠≢f1← ⍵ Fld 1  
              Vec← {  3≠≢⍵: ⍵ ⋄ Parens ',',⍵ }
              (' '/⍨⍺),(Vec bare CondQuotes f1),⍺⊃  ' ' '(,⍥⊂)' 
        }⍵
        CASE quotRgtErrI: 11 ⎕SIGNAL⍨'XFIX ` ERROR: Invalid use of ` (Quote Right).'
  } ⍠OPTS

⍝ Semicolon disambiguation:   
⍝       (...;...) vs [...;...] vs bare ;, e.g. in tradfn headers.
  Scan4Semicolons←{ 
      LP RP LBk RBk LBc RBc SQ SP SEMI DIAMOND←'()[]{}'' ;⋄'
    ⍝ Stack shared across lines to keep track of dfns braces {}
      lines thisL stack ⎕IO← ⍵ '' ⍬ 0
      ScanLn←{ ⍵≥≢lines: ⍺ ⋄ thisL⊢← ⍵⊃lines ⋄ (⍺,⊂'' ScanCharAt ⍵ 0) ∇ ⍵+1 }
      ScanCharAt←{
          startLix startCix← ⍵ 
          startCix ≥ ≢thisL: ⍺ 
          ch← startCix⊃thisL
          ch∊SQ:⍺{
            ⍝ Search for closing quote. Adjust if not present (though other Scan4Strings will capture)...
              endCix← ch⍳⍨curLC← ⍵↓thisL  
              endCix+←  (≢curLC) > endCix
              (⍺,ch,endCix↑curLC) NextCh startLix(⍵+endCix-1)  
          }startCix + 1 
          ch∊LP LBk LBc: (⍺,ch) NextCh ⍵⊣ stack,←ch
          ch∊RP RBk RBc: (⍺,ch) NextCh ⍵⊣ stack↓⍨←¯1
        ⍝ Directly inside parens, semicolons are treated specially...
        ⍝ Otherwise, let APL handle semicolons.
          ch∊SEMI DIAMOND: ⍺{ LP=⊃⌽stack:(⍺,')(') NextCh ⍵ ⋄ (⍺,ch)NextCh ⍵ }⍵
          ch=SP: (⍺,ch) NextCh ⍵ + 0 (¯1++/∧\SP=startCix↓thisL)
          (⍺,ch) NextCh ⍵
     }
     NextCh← ScanCharAt∘(0 1∘+)
     ⍬ ScanLn 0
  }

⍝ Set PREDEFINED MACROS  
⍝  __FILE__   Name of input file or '[TERM]'
⍝  __LINE__   Current line number
⍝  Miscellaneous: ⎕AL.LC, etc.
⍝ Note: ⎕AL.LC includes ⎕al.lc (etc.) per definition of "system" macros (with ⎕ prefix).
  ∆UC←⎕A,⎕Á ⋄ ∆LC← ⎕C ∆UC ⋄ ∆MC←∆UC,∆LC
  MACROS←∆DICT  ('⎕AL.LC'  '⎕AL.UC' '⎕AL.MC') (Quotes¨ ∆LC ∆UC ∆MC)
  _←MACROS.Set '__FILE__'  (' ',' ',⍨Quotes'[TERM]')
  INCLUDE←∆DICT ⍬ ⍬ 

⍝ EXECUTIVE: Scan the input string ⍵ 
  res← Scan4Semicolons Scan4Specials Scan4Macros Scan4Strings Include ⍵
  ×⍺: 2 (⊃1↓⎕RSI).⎕FIX res ⋄ res 
}
