 DictTest←{
     ⍺←1

     ⎕PW←200
     range←⍵

     _←⎕SE.UCMD'LOAD Dict.aplf'
     ⎕←⎕FX'd._Hashing←.*' 'd._Hashing'⎕R'' ''⊣⎕NR'Dict'
     _←'cmpx'⎕CY'dfns'

     SIZE←⌈10*0 0.3 0.5 1 1.5 2 3 3.5 4
     NAMES←'X',∘⍕¨SIZE

    ⍝ KEYS←↓⎕A[?10001 8⍴≢⎕A] ⋄ ⎕←'Keys are 8-char strings. Vals are 8-char strings'
     KEYS←⍳10001 ⋄ ⎕←'Keys are integers. Vals are 8-char strings'

     d∘←0 Dict(¯1↓KEYS)(↓⎕A[?10000 8⍴≢⎕A])

     ⎕←'HASHING: ',{
         'IGNORED'
         d._Hashing←{HASH:_←⍵⊣keysG∘←1500⌶keysG ⋄ 1:_←⍵}
         ⍵=1:'ON'⊣d.HASH←1
         'OFF'⊣d.HASH←0
     }⍺

     ⎕←'range: 0..',(range-1)
     ⍞←'cmpx'
     _←⍎¨NAMES{⍺,'∘← KEYS[10000⌊?',(⍕⍵),'⍴',(⍕range),']'}¨SIZE
     ⍞←' [GetX]'
     optsA←1000000×{⍞←'.' ⋄ ⍎cmpx'd.GetX ',⍵}¨NAMES
     ⍞←' [Get¨]'
     optsB←1000000×{⍞←'.' ⋄ ⍎cmpx'd.Get¨ ',⍵}¨NAMES

     ⎕←'No. of Gets:   ',8 0⍕SIZE
     ⎕←'∘ GetX TOT us    ',8 1⍕optsA
     ⎕←'  Get¨ TOT us    ',8 1⍕optsB
     ⎕←'∘ GetX each (us) ',8 2⍕eachA←optsA÷SIZE
     ⎕←'  Get¨ each (us) ',8 2⍕eachB←optsB÷SIZE
     ⎕←'∘ GetX ratio     ',8 2⍕optsA÷⌊/optsA
     ⎕←'  Get¨ ratio     ',8 2⍕optsB÷⌊/optsB
     ⎕←39⍴'¯'
     ⍬
 }
