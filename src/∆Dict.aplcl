:class DictNs

  ⎕IO ⎕ML←0 1 
  :Field Private _keys←    ⍬
  :Field Private _vals←    ⍬
  :Field Private _default← ⍬

  ∇ New (pairs)
    _keys _vals← ↓⍉↑pairs
  ∇
  ∇ New (k v)  
    :Implements Constructor
    :Access Public
    _keys _vals←k v
  ∇
  ∇ New (k v d)
    :Implements Constructor
    :Access Public
     _keys _vals _default←k v d 
  ∇
  ∇ New
    :Implements Constructor
    :Access Public
  ∇

 :Property Keyed Default Values
    :Access Public Instance
        ∇ r←get arg 
          k←⊃arg.Indexers
          old← k∊ _keys
          :IF 0∊ old
            r← (≢k)⍴⊂_default
            :If 1∊ old  
              (old/r)← _vals[_keys⍳ old/k]
            :EndIf
          :Else 
             r← _vals[_keys⍳ k]
          :Endif 
        ∇
        ∇ set arg;new;k;v
          v←arg.NewValue
          k←⊃arg.Indexers
          old← k∊ _keys
          :If 0∊old
              keys vals,← (⊂~old)/¨ k v
          :EndIf
          :If 1∊ old  
              k v← (⊂old)/¨ k v
              _vals[_keys⍳k]← v
          :EndIf
        ∇
    :EndProperty


  :Property default
  :Access Public Instance
    ∇r←get 
     r←_default
    ∇
    ∇set d 
     _default←d 
    ∇
  :End Property default

  ⍝H ---------------------------------------------------------------------------------
  ⍝H --------------------------------------------------------+
  ⍝H    Dict: A small Dictionary utility                     |
  ⍝H          keys and values may have any shape and type    |
  ⍝H --------------------------------------------------------+
  ⍝H [a] d← [default] Dict keyList valList   where vectors (keyList ≡⍥≢ valList)
  ⍝H                       ↓⍉↑ kv1 kv2 ...   where kvN is a (key value) pair, e.g. ('name' 'Terry Dactyl')
  ⍝H [b] d← [default] Dict ⍬ ⍬               generates a dictionary with empty lists 
  ⍝H                       ⍬                 same as (Dict ⍬ ⍬)
  ⍝H Returns a dictionary namespace <d>, setting
  ⍝H        [a]  its keys to keyList and values to valList, if <keyList valList> is presented;
  ⍝H        [b]  no initial keys or values, if ⍬ ⍬ or ⍬.
  ⍝H   If <default> is defined, that will be used as the default value for Get (etc) for missing keys.
  ⍝H   If not, ⍬ is used as the default value.  (See variable default).
  ⍝H   A useful default for counters is 0.
  ⍝H
  ⍝H ---------------------------------------------------------------------------------
  ⍝H                                         
  ⍝H Basic:                       
  ⍝H    Creating Objects:       d←Dict     Copy
  ⍝H    Setting and Getting:    Set      Get      default[←...]
  ⍝H    Sorting Values:         SortBy   SortIP 
  ⍝H    Deleting k-v pairs:     Del
  ⍝H    Displaying All          keys     vals      Items
  ⍝H Advanced:
  ⍝H   Modifying Values:        Do       Cat   
  ⍝H
  ⍝H For Help:   Dict 'Help' 
  ⍝H             Help, if d is a dictionary.
  ⍝H 

   
  ⍝ _Err: (Internal) Error Signaller
    _Err← ⎕SIGNAL {⊂⎕DMX.(('EM' ('Dict: ',EM ⍵⊃⍨0≠≢⍵))('EN' (EN 11⊃⍨EN∨0≠≢⍵))('Message' Message))}

  ⍝H ======================================
  ⍝H =======        BASIC        ==========
  ⍝H ======================================

  ⍝H Copy
  ⍝H d2← Copy
  ⍝H   Returns a complete, independent copy (clone) of dictionary 
  ⍝H
    ∇ d2←Copy
      :Access Public 
      d2←⎕NEW ∆Dict _keys _vals default
    ∇ 

  ⍝H Defined
  ⍝H [1|0]← Defined key
  ⍝H Returns 1 if <key> is defined, else 0.
  ⍝H
  ∇ r←Defined k 
      :Access Public 
      r←  (≢_keys)>_keys⍳⊂k 
  ∇

  ⍝H Del (or Delete)
  ⍝H [1|0]← [quiet] Del key
  ⍝H   If the key <key> exists, deletes the entry (key value pair).
  ⍝H      Returns: shy 1 (deleted).
  ⍝H   If it does NOT exist:
  ⍝H      if quiet=1: 
  ⍝H          returns shy 0 (not found);
  ⍝H      otherwise (quiet=0): 
  ⍝H          signals an error (⎕EN=3 Index Error).
  ⍝H
   ∇ {r}← {quiet} Del k 
     ;p 
     :Access Public 
     :IF 0=⎕NC 'quiet' ⋄ quiet←0 ⋄ :Endif 
     p← _keys⍳ k 
     :IF  0∊ r← p< ≢_keys
          (_keys _vals) /⍨← ⊂p 
     :Elseif ~quiet
          3 ⎕SIGNAL⍨'Dict.Del: Key Not Found (⍺:quiet option not selected).'
     :Endif 
   ∇

  ⍝H Get
  ⍝H val← [nonceDefault] Get key
  ⍝H Returns: 
  ⍝H   - the value <val> for <key>, if <key> define
  ⍝H   - Otherwise, returns a default as specified here:
  ⍝H     - The default is nonceDefault, if nonceDefault defined, 
  ⍝H     - Otherwise, the default is that defined when the dictionary was 
  ⍝H       created via d←Dict... 
  ⍝H If not explicitly specified by the user, the fundamental default (default) is ⍬.
  ⍝H
    Get←{ 
          ⍺← ⊢ ⋄ k← ⍵ 
      (≢_keys)>p←_keys⍳⊂k: p⊃_vals 
      0≡⍺ 0: default ⋄ ⍺
    }

  ⍝H Help
  ⍝H   Provides this helpful information.
  ⍝H   Alternatively, execute:   Dict 'Help'
  ⍝H
    _←⎕FX 'Help' '_Help ⍬'
    ∇ Help
      ;h 
      :Access Public 
      _h←'^\h*⍝H(.*)' ⎕S '\1'⊣⎕SRC ⎕THIS
      :IF 0<≢_h
           ⎕ED '_h'
      :Else 
         'No help available' 
      :Endif 
    ∇

  ⍝H Items
  ⍝H i← Items
  ⍝H Returns all the keys and their values as key-value pairs.
  ⍝H
   ∇ i← Items
    :Access Public 
     i←↓⍉↑keys vals
   ∇

  ⍝H Set
  ⍝H {val}← Set key val    OR:   {val}← key Set val
  ⍝H   Sets value for key key to value val. 
  ⍝H   If it exists, it is overwritten.
  ⍝H Shyly returns the value <val> just set.
  ⍝H ∘ Handy: Set keys and values as pairs (k v):
  ⍝H   Set¨ (k1 v1)(k2 v2)...
  ⍝H ∘ Handy: Set keys and values as separate lists (k1 k2 k3) and (v1 v2 v3)
  ⍝H   k1 k2 k3 Set¨ v1 v2 v3
  ⍝H
    Set←{  
          ⍺←⊢ ⋄ k v←⍺ ⍵
      (≢keys)>p← keys⍳⊂k: _← (p⊃vals)←v  
      1: _←v ⊣ (keys vals),← (⊂k) (⊂v)  
    }

  ⍝H SortBy
  ⍝H {dict}← [dict|d] SortBy sortFields
  ⍝H   Sorts into dictionary dict, created via dict←Dict ...  
  ⍝H     By default, sorts in place, returning the current dictionary (not a copy).
  ⍝H   If sortFields is empty, sorts using keys. 
  ⍝H     Otherwise, (≢sortFields) MUST≡ (keys).
  ⍝H Returns:
  ⍝H   dict omitted or Dict≡d:     the current dictionary.
  ⍝H   dict presented and dict≢d:  that dictionary.
  ⍝H Examples: 
  ⍝H   SortBy ⍬                  - Sorts d* by keys                          *=sorted in place
  ⍝H   (SortBy keys)             - Sorts d* by keys
  ⍝H   (SortBy ⎕C keys)          - Sorts d* by keys, ignoring case 
  ⍝H   (SortBy ⌽vals)            - Sorts d* by values in descending order 
  ⍝H   dict← (Dict ⍬) SortBy ⍬   - Sorts d by keys into a new dictionary (d unchanged). dict has ⍬ as default.   
  ⍝H   dict← (Copy SortBy vals)  - Sorts d by Values into dict (d unchanged). dict takes on d's default value.
  ⍝H 
    SortBy←{ 
        ⍺←⎕THIS ⋄ flds← ⍵ keys⊃⍨ 0=≢⍵
        keys ≢⍥≢ flds: _Err 'SortBy: Sort field array (⍵) has incorrect number of elements.'
        ⍺.(keys vals)←keys vals    ⍝ this does nothing if ⍺ and ⎕THIS are the same...
        ⍺.(keys vals)⌷⍨← ⊂⊂⍋ flds
      1: _←⍺
    }

  ⍝H SortIP
  ⍝H {d}← SortIP
  ⍝H   Sorts dictionary <d> in place in ascending order. Returns shy <d>.
  ⍝H
    _←⎕FX '{d}←SortIP'  'd←SortBy keys'

  ⍝H keys
  ⍝H kk← keys (R/O)
  ⍝H Returns the list of keys
  ⍝H
  _← ⎕FX 'kk← keys' 'kk←keys'

  ⍝H vals
  ⍝H vv← vals (R/O)
  ⍝H Returns the list of values
  ⍝H
  _← ⎕FX 'vv← vals' 'vv←vals'

  ⍝H default  (namespace variable)
  ⍝H ...← default
  ⍝H     Gets the default value.
  ⍝H Returns the current default value (when a key is not found)
  ⍝H 
  ⍝H default← <any data value>
  ⍝H     Sets the default value to use when keys are missing.
  ⍝H     Normally, the default is set through Dict (q.v.), but it may
  ⍝H     be set via assignment as above.
  ⍝H  
  ⍝H Note: Do not expunge default. Bad things will happen!
  ⍝H

  ⍝H ======================================
  ⍝H =======    ADVANCED         ==========
  ⍝H ======================================
  ⍝H Do
  ⍝H newVal← key (op Do) val       ⍝  key=⍺, op=⍺⍺, val=⍵
  ⍝H   Performs:    key Set (Get key) op ⍵   
  ⍝H Shyly returns: the new value
  ⍝H -------------------------------------
  ⍝H ∘ Example: Dictionary <counter>
  ⍝H   Increment a counter (initially 0) named 'jack' to 1
  ⍝H      counter← 0 Dict ⍬                  ⍝ Set defaults to 0
  ⍝H     'jack' +counter.Do 1                ⍝ Sets entry jack to 0+1  => 1
  ⍝H     'jack' +counter.Do 2                ⍝ Sets entry jack to 1+2  => 3
  ⍝H     'jack' *counter.Do 2                ⍝ Sets entry jack to 3*2  => 9...
  ⍝H 
    Do← { 0:: _Err ⍬ ⋄ 1: _←⍺ Set (Get ⍺) ⍺⍺ ⍵ }

  ⍝H Cat  
  ⍝H newVal← key Cat item
  ⍝H    Treats the value for <key> as a list (vector of vectors) and 
  ⍝H    appends <item> itself to the end of that list, conceptually:
  ⍝H          value← value,⊂item
  ⍝H Shyly returns the new value.
  ⍝H ----------------------------------------------
  ⍝H ∘ Example: Create a dictionary of word lists:
  ⍝H     french← Dict ⍬
  ⍝H   Let's create list 'one'  in our dictionary <french> and append to it:
  ⍝H                                  | Before exec'n   |  After exec'n
  ⍝H     'one' french.Cat  'un'   ==> | ⍬               |   un             
  ⍝H     'one' french.Cat  'une'  ==> | ⊂'un            |   un  une       
  ⍝H     'one' french.Cat  '1'    ==> | 'un' 'une'      |   un  une  1    
  ⍝H ∘ Example: Add a list of items to wordlist 'french'            
  ⍝H   french← Dict ⍬                                  french← Dict ⍬                             
  ⍝H ⍝ Appends three items to list, one at a time.   ⍝ This appends one item containing 3 items!
  ⍝H   ('one'french.Cat)¨ '2' 'deux' 'dos'             'one' french.Cat  '2' 'deux' 'dos'     
  ⍝H    french.Get 'one'                               french2.Get 'one'
  ⍝H    ┌─┬────┬───┐                                   ┌────────────┐
  ⍝H    │2│deux│dos│                                   │┌─┬────┬───┐│
  ⍝H    └─┴────┴───┘                                   ││2│deux│dos││
  ⍝H                                                   │└─┴────┴───┘│
  ⍝H                                                   └────────────┘
  ⍝H
    Cat← { 0:: _Err ⍬ ⋄ 1:  _← ⍺ Set (Get ⍺),⊂⍵ }

  ⍝ Executive 
      ⍺← ⍬
      Dict← ∇
  'help'≡⎕C ⍵: Help
  (2≠≢⍵)∧⍬≢⍵:  _Err 'DOMAIN ERROR. (See Dict.Help)'
      k v← ,¨⊆ ⍵ 
      (default (keys vals) )← ⍺  (k v)  
      d
 }
 :EndClass