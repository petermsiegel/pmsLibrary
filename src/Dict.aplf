Dict←{ 
  ⍝H ---------------------------------------------------------------------------------
  ⍝H ----------------------------------------+
  ⍝H    Dict: A small Dictionary utility     |
  ⍝H ----------------------------------------+
  ⍝H [a] d ← [default] Dict keyList valList
  ⍝H [b] d←  [default] Dict ⍬ 
  ⍝H 
  ⍝H Returns a dictionary namespace <d>, setting
  ⍝H        [a]  its keys to keyList and values to valList, if <keyList valList> is presented;
  ⍝H        [b]  no initial keys or values, if ⍬.
  ⍝H   If <default> is defined, that will be used as the default value for Get (etc) for missing keys.
  ⍝H   If not, ⍬ is used as the default value.
  ⍝H
  ⍝H For Help, do Dict 'Help' OR, if d is a dictionary, d.Help.
  ⍝H ---------------------------------------------------------------------------------
  ⍝H
  ⍝H Basic: 
  ⍝H    Creating Objects:       d←Dict     d.Copy
  ⍝H    Setting and Getting:    d.Set      d.Get       d.default[←...]
  ⍝H    Sorting Values:         d.SortBy   d.SortIP 
  ⍝H    Deleting K-V Pairs:     d.Del
  ⍝H    Displaying All          d.Keys     d.Vals      d.Items
  ⍝H Advanced:
  ⍝H   Modifying Values:        d.Do       d.Cat    
  ⍝H 
    ⎕IO ⎕ML←0 1 
    d←⎕NS'' ⋄ _←d.⎕DF (⍕⎕THIS),'.[Dict]'
    ⍺← ⍬

  ⍝ _Err: (Internal) Error Signaller
    d._Err← ⎕SIGNAL {⊂⎕DMX.(('EM',⍥⊂'Dict: ',EM ⍵⊃⍨0≠≢⍵)('EN',⍥⊂ EN 11⊃⍨0≠≢⍵)('Message' Message))}

  ⍝H ======================================
  ⍝H =======        BASIC        ==========
  ⍝H ======================================

  ⍝H d2 ← d.Copy
  ⍝H   Returns a complete, independent copy (clone) of dictionary d.
  ⍝H
    _←d.⎕FX 'd2←Copy'  'd2←default Dict _keys _vals'

  ⍝H [1|0] ← d.Defined key
  ⍝H   Returns 1 if <key> is defined, else 0.
  ⍝H
    d.Defined←{ 
       (≢_keys)>_keys⍳⊂k
    }

  ⍝H [1|0] ← [force] d.Del key
  ⍝H   Deletes entry for key <key>, if it exists. returning shy 1 (deleted).
  ⍝H   If not, 
  ⍝H      if force=1: returns shy 0 (not found);
  ⍝H      otherwise (force=0): signals an error (⎕EN=3 Index Error).
  ⍝H
    d.Del← d.Delete← { 
      k← ⍵ ⋄ ⍺←0
      (≢_keys)>p←_keys⍳⊂k: _←1⊣ (_keys _vals) /⍨← ⊂ p≠⍳≢_keys
      ⍺: _←0  ⋄ 3 ⎕SIGNAL⍨'Dict.Del: Unable to delete missing key (requires ⍺=1)'
    }

  ⍝H val ← [curDefault] d.Get key
  ⍝H   Returns 
  ⍝H   - the value <val> for <key>, if <key> defined.
  ⍝H   - Otherwise, returns a default as specified here:
  ⍝H     The default is curDefault, if curDefault defined, 
  ⍝H   - Otherwise, the default is that defined when the dictionary was 
  ⍝H     created via d←Dict... 
  ⍝H     - If not explicitly specified by the user, the default is ⍬.
  ⍝H
    d.Get←{  
      k←⍵  
      (≢_keys)>p←_keys⍳⊂k: p⊃_vals 
      0=⎕NC '⍺': default ⋄ ⍺
    }

  ⍝H d.Help
  ⍝H   Provides this helpful information.
  ⍝H   Alternatively, execute:   Dict 'Help'
  ⍝H
    _←d.⎕FX 'Help'  ';_help' '_help←''^\h*⍝H(.*)'' ⎕S ''\1''⊣⎕NR ''Dict'' ' '⎕ED ''_help'''

  ⍝H i ← d.Items
  ⍝H   Returns all the keys and their values as key-value pairs.
  ⍝H
    _←d.⎕FX 'i←Items' 'i←↓⍉↑_keys _vals'

  ⍝H {val} ← d.Set key val    OR:   {val}← key d.Set val
  ⍝H   Sets value for key key to value val. 
  ⍝H   If it exists, it is overwritten.
  ⍝H Handy: Set keys and values as pairs (k v):
  ⍝H   d.Set¨ (k1 v1)(k2 v2)...
  ⍝H Handy: Set keys and values as separate lists (k1 k2 k3) and (v1 v2 v3)
  ⍝H   k1 k2 k3 d.Set¨ v1 v2 v3
  ⍝H
    d.Set←{  
      ⍺←⊢ ⋄ k v←⍺ ⍵
      (≢_keys)>p←_keys⍳⊂k: _←(p⊃_vals)←v  
      1: _←v ⊣ (_keys _vals),← (⊂k) (⊂v)  
    }

  ⍝H {newD}← [newD|d] d.SortBy sortFields
  ⍝H   Shyly sorts into dictionary newD, created via newD←Dict ... (default: d itself) 
  ⍝H   If sortFields is empty, uses d.keys. (Alternative: ⎕C d.keys)
  ⍝H   Otherwise, (≢sortFields) MUST≡ (d.keys).
  ⍝H   Examples:   
  ⍝H     newD← (Dict ⍬) d.SortBy ⍬   - Sorts d by keys into newD (d unchanged)
  ⍝H     d.SortBy ⍬                  - Sorts d by keys, updating d
  ⍝H     d.SortBy d.vals             - Sorts d by Values, updating d
  ⍝H     newD← d.(Copy SortBy vals)  - Sorts d by Values, into newD
  ⍝H 
    d.SortBy←{ 
        ⍺←⎕THIS 
        0=≢⍵: _←⍺ ∇ keys
        ix← ⍋⍵ ⋄ ⍺._keys← _keys[ix] ⋄ ⍺._vals←_vals[ix] 
        1: _←⍺
    }

  ⍝H {d} ← d.SortIP
  ⍝H   Sorts dictionary <d> in place. Returns shy <d>.
  ⍝H
    _←d.⎕FX '{d}←SortIP'  'd←SortBy _keys'

  ⍝H kk ← d.Keys (R/O)
  ⍝H   Returns the list of keys
  ⍝H
  _← d.⎕FX 'kk← Keys' 'kk←_keys'

  ⍝H vv ← d.Vals (R/O)
  ⍝H   Returns the list of values
  ⍝H
  _← d.⎕FX 'vv← Vals' 'vv←_vals'

  ⍝H   d.default [variable]
  ⍝H   Returns the current default value (when a key is not found)
  ⍝H 
  ⍝H   d.default← <any data value>
  ⍝H     Sets the default value to use when keys are missing.
  ⍝H  
  ⍝H   Note: Do not expunge d.default. Bad things will happen!
  ⍝H   Note: Normally set via Dict:
  ⍝H     Pi← ⎕NULL Dict ('one' 'two' 'three') (○1 2 3)
  ⍝H

  ⍝H ======================================
  ⍝H =======    ADVANCED         ==========
  ⍝H ======================================
  ⍝H Do:
  ⍝H   newVal ← key (op d.Do) val       ⍝  key=⍺, op=⍺⍺, val=⍵
  ⍝H     Performs:    key Set (Get key) op ⍵   
  ⍝H     Shyly returns: the new value
  ⍝H -------------------------------------
  ⍝H  ∘ Example: Dictionary <counter>
  ⍝H    Increment a counter (initially 0) named 'jack' to 1
  ⍝H     counter← 0 Dict ⍬                   ⍝ Set defaults to 0
  ⍝H     'jack' +counter.Do 1                ⍝ Sets entry jack to 0+1 => 1
  ⍝H     'jack' ×counter.Do ○1               ⍝ Sets entry jack to 1×pi => 6.28...
  ⍝H 
    d.Do← {   
      0:: _Err ⍬
      1: _←⍺ Set (Get ⍺) ⍺⍺ ⍵
    }

  ⍝H Cat  
  ⍝H    newVal← key d.Cat item
  ⍝H Treats the value for <key> as a list (vector of vectors) and 
  ⍝H appends <item> itself to the end of that list, conceptually:
  ⍝H          value← value,⊂item
  ⍝H    Shyly returns the new value.
  ⍝H ----------------------------------------------
  ⍝H ∘ Example: Create a dictionary of word list:
  ⍝H   french← Dict ⍬
  ⍝H   Let's create and append to list 'one' in our dictionary <french>:
  ⍝H                              Initial list       After execution
  ⍝H   'one' french.Cat  'un'   ⍝ ⍬  :              un             
  ⍝H   'one' french.Cat  'une'  ⍝ ⊂'un              un  une       
  ⍝H   'one' french.Cat  '1'    ⍝ 'un' 'une'        un  une  1    
  ⍝H ∘ Example: Add a list of items to wordlist 'french'            
  ⍝H   french← Dict ⍬
  ⍝H   'one'∘ french.Cat¨ '2' 'deux' 'dos'     ⍝ Appends three items at once to list.
  ⍝H 
    d.Cat←{
      0:: _Err ⍬
      1:  _← ⍺ Set (Get ⍺),⊂⍵
    }

    d.Dict←∇
    'help'≡⎕C ⍵: d.Help
    k v←⊆⍵ 
    d.(default (_keys _vals) )← ⍺  (k v)  
    d
 }