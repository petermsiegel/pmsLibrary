Dict←{ 
  ⍝H ---------------------------------------------------------------------------------
  ⍝H ----------------------------------------+
  ⍝H    Dict: A small Dictionary utility     |
  ⍝H ----------------------------------------+
  ⍝H [a] d ← [default] Dict keyList valList
  ⍝H [b] d←  [default] Dict ⍬ 
  ⍝H 
  ⍝H Returns a dictionary namespace <d>, setting
  ⍝H        [a]  its keys to keyList and values to valList, if <keyList valList> is presented;
  ⍝H        [b]  no initial keys or values, if ⍬.
  ⍝H   If <default> is defined, that will be used as the default value for Get (etc) for missing keys.
  ⍝H   If not, ⍬ is used as the default value.
  ⍝H
  ⍝H For Help, do Dict 'Help' OR, if d is a dictionary, d.Help.
  ⍝H ---------------------------------------------------------------------------------
  ⍝H
    ⎕IO ⎕ML←0 1 
    d←⎕NS''
    ⍺← ⍬

  ⍝H newVal ← [⍺] op d.ApplyTo key
  ⍝H   (no ⍺) Does: key← op key
  ⍝H   (w/ ⍺) Does: key← ⍺ op key
  ⍝H   Shyly returns new value
  ⍝H   E.g.   newVal← 1 + d.ApplyTo 'fred'  OR   
  ⍝H          newVal← 1∘+ d.ApplyTo 'fred'
  ⍝H
    d.ApplyTo←{ ⍺←⊢ 
      0:: ⎕SIGNAL ⊂⎕DMX.(('EM',⍥⊂'Dict: ',EM)('EN' EN)('Message' Message))
      1: _←⍵ Set ⍺ ⍺⍺ Get ⍵
    }

  ⍝H {v} ←   d.Cat k v   OR   {v} ← k d.Cat v
  ⍝H   Catenates <v> to the end of the prior value at key <k>. 
  ⍝H   If none, sets the value to <v>.
  ⍝H   Shyly returns the new value.
  ⍝H
    d.Cat←{ 
      0=⎕NC '⍺': _← ∇/⍵
      k v←⍺ ⍵
      (≢Keys)>p←Keys⍳⊂k: _←p⊃Vals ⊣ (p⊃Vals) ,← ⊂v
      1: _←v ⊣(Keys Vals),←,∘⊂¨k (⊂v)  
    }

  ⍝H d2 ← d.Copy
  ⍝H   Returns a complete, independent copy (clone) of dictionary d.
  ⍝H
    _←d.⎕FX 'd2←Copy' 'd2←Default Dict Keys Vals'

  ⍝H [1|0] ← d.Defined key
  ⍝H   Returns 1 if <key> is defined, else 0.
  ⍝H
    d.Defined←{ k←⍵
       (≢Keys)>Keys⍳⊂k
    }

  ⍝H [1|0] ← [force] d.Del key
  ⍝H   Deletes entry for key <key>, if it exists. Returns 1 (deleted).
  ⍝H   If not, returns 0 (not found) IF force is 1.
  ⍝H   Otherwise, signals an error (⎕EN=3 Index Error).
  ⍝H
    d.Del←{ k←⍵ ⋄ ⍺←0
      (≢Keys)>p←Keys⍳⊂k: 1⊣ (Keys Vals) /⍨← ⊂ p≠⍳≢Keys
      ⍺: 0  ⋄ 3 ⎕SIGNAL⍨'Dict.Del: Unable to delete missing key'
    }

  ⍝H val ← [curDefault] d.Get key
  ⍝H   Returns val, if defined.
  ⍝H   Otherwise, returns curDefault (if curDefault is defined), 
  ⍝H   Else Default defined when the dictionary was created (⍬ if not explicitly specified by the user).
  ⍝H
    d.Get←{  k←⍵
    (≢Keys)>p←Keys⍳⊂k: p⊃Vals 
    0=⎕NC '⍺': Default ⋄ ⍺
    }

  ⍝H d.Help
  ⍝H   Provides this helpful information.
  ⍝H   Alternatively, execute:   Dict 'Help'
  ⍝H
    _←d.⎕FX 'Help'  ';_help' '_help←''^\h*⍝H(.*)'' ⎕S ''\1''⊣⎕NR ''Dict'' ' '⎕ED ''_help'''

  ⍝H i ← d.Items
  ⍝H   Returns all the keys and their values as key-value pairs.
  ⍝H
    _←d.⎕FX 'i←Items' 'i←↓⍉↑Keys Vals'

  ⍝H val ← d.Set key val    OR:   val← key d.Set val
  ⍝H   Sets value for key key to value val. 
  ⍝H   If it exists, it is overwritten.
  ⍝H
    d.Set←{  
      0=⎕NC '⍺': _← ∇/⍵
      k v←⍺ ⍵
      (≢Keys)>p←Keys⍳⊂k: _←(p⊃Vals)←v
      1: _←v ⊣ (Keys Vals),←,∘⊂¨k v  
    }

  ⍝H newD← [newD|d] d.SortBy sortFields
  ⍝H   Sorts into dictionary newD, created via newD←Dict ... (default: d itself) 
  ⍝H   If sortFields is empty, uses d.Keys. (Alternative: ⎕C d.Keys)
  ⍝H   Otherwise, (≢sortFields) MUST≡ (d.Keys).
  ⍝H
    d.SortBy←{ 
        ⍺←⎕THIS 
        0=≢fields: ⍺ ∇ Keys
        ix← ⍋⍵ ⋄ ⍺.Keys← Keys[ix] ⋄ ⍺.Vals←Vals[ix] 
        1: _←⍺
    }

  ⍝H {d} ← d.SortIP
  ⍝H   Sorts dictionary <d> in place. Returns shy <d>.
  ⍝H
    _←d.⎕FX '{d}←SortIP'  'd←SortBy Keys'

  ⍝H kk ← d.Keys (R/O)
  ⍝H   Returns the list of keys
  ⍝H     Note: Keys is a local variable. Don't change it directly!
  ⍝H

  ⍝H vv ← d.Vals (R/O)
  ⍝H   Returns the list of values
  ⍝H     Note: Vals is a local variable. Don't change it directly!
  ⍝H

  ⍝H vv ← d.Default (R/W)
  ⍝H   Returns the Default value (when a key is not found)
  ⍝H     Note: Default is a local variable. If can have any data value.
  ⍝H

    d.Dict←∇
    'Help'≡⍥⎕C ⍵: d.Help
    d.(Default (Keys Vals) )← ⍺ (⊆⍵)  
    d
 }