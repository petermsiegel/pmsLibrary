:Namespace Markdown

:Section Main_Routines  
⍝
⍝ -------------------------------------------------------------------------------------------
⍝ Main routines and declarations
⍝ *** Show *** 
  ⍝ Show:     hNs@ns← newOpts ∇ markdown@CVV
  ⍝ markdown: APL char vectors (CVV)  
  ⍝ newOpts:  New options for size and JSON option variables. Of the form
  ⍝          ('emoji' 0), ('tables' 1), ('size' (500 400)), 1 for Json true and 0 for false.
  ⍝ hNs:      Dyalog Render object (⎕WC namespace)
  ⍝           hNs.HTML contains the generated HTML as a character vector with CR's (via HTMLRenderer)
  ⍝           hNs.MD contains the source markdown used to generate it.
  ⍝ Once the result returned disappears, the generated HTML object disappears also.
  ⍝ Do:              h← size Markdown.Show ... 
  ⍝ Then to delete:  ⎕EX 'h' OR h←''
  Show←{
    0:: ⎕SIGNAL ⊂⎕DMX.(('EM' EM)('Message' Message)('EN' EN))
      ⍺← ⍬ ⋄ o← ⍺ ⋄ hN← #.⎕NS⍬ ⋄ hN.MD← ⍵         ⍝ Raw user markdown => hN.MD 
      (s p) h0← o MergeOpts ⎕SRC ⎕THIS            
      h1← h0 InsertMD Flat hN.MD                  ⍝ Insert the markdown text into the HTML/JS src code   
      opts← ('HTML'  h1) (s,⍨ ⊂'Size') (p,⍨ ⊂'Posn') ('Coord' 'ScaledPixel')
      hN⊣ 'hN.htmlObj' ⎕WC 'HTMLRenderer',⍥⊆ opts    ⍝ Render and return the HTML object
  }
  ⍝ *** Here ***
  ⍝ Here: CVV← token@CV ∇ CVV                    
  ⍝   Find payload in char vectors (CV) following ('^\h*⍝',token,'\h|$') in a vector of CV's. 
  ⍝     - If the token is 'XX', we match /^\h*⍝XX/ followed by /\h|$/. 
  ⍝       I.e., it will match XX, but not (simple) X, XY, XXX, etc.
  ⍝     - If the "token" is 'XX?' or 'X{1,2}', we will match X, XX, but not XY or XXX.
  ⍝   What follows the token and any following blank is the payload /(.*)/'. 
  Here← {  
    pfx src← ⍺ ⍵
    re←'^\h*⍝', pfx, '(?:\h|$)(.*)'                        
    re ⎕S '\1'⊣ src 
  }
  ⍝ *** defaults ***
  ⍝ defaults: d← ∇
  ⍝   Show the default options in JSON format, including 
  ⍝  'size' and 'posn'  used in the HTMLRenderer call.
  ∇ d← defaults  ;pfx; defs
    pfx←  CR,     '  // HTMLRenderer opts in Json format'
    pfx,← CR, CR,⍨'     size: [', '],',⍨ 1↓∊',',¨⍕¨sizeDef 
    pfx,←     CR,⍨'     posn: [', '],',⍨ 1↓∊',',¨⍕¨posnDef 
    defs← '^\h{4}' ⎕R ' ' RE._Simple⊢ 'J[CO]' Here ⎕SRC ⎕THIS 
    d← '{', pfx, defs, '}'  
  ∇
  ∇ d← defaults2  ;defs; ns; pfx 
    pfx←  CR,     '  // HTMLRenderer opts in APL format'
    pfx,← CR, CR,⍨'     (''size'' [', ']),',⍨ 1↓∊',',¨⍕¨sizeDef 
    pfx,← CR,⍨'     (''posn'' [', ']),',⍨ 1↓∊',',¨⍕¨posnDef 
    ns← ⎕JSON⍠'Dialect' 'JSON5'⊢ 'J[CO]' Here ⎕SRC ⎕THIS 
    defs← ∊CR,⍨¨ ns.{ ('(''',⍵,''' ',⍕⎕OR ⍵), ')' }¨ns.⎕NL ¯2 
    d← '(', pfx, defs, ')'  
  ∇
  ⍝ example: e← ∇
  ⍝   A markdown example.  
  ∇ e← example  
    e← 'EX' Here ⎕SRC ⎕THIS                                        
  ∇
  ⍝ help: {html@ns}← ∇
  ⍝   To see the markdown source, see: html.MD 
  ∇ {html}← help ; src  
    html← ('size',⍥⊂ 900 900)('posn',⍥⊂ 5 5) Show 'HLP' Here ⎕SRC ⎕THIS 
    {}⍞
  ∇

⍝ -------------------------------------------------------------------------------------------
⍝ Constants
  ⎕IO ⎕ML← 0 1 
  CR← ⎕UCS 13
⍝ -------------------------------------------------------------------------------------------
⍝ Variables 
  sizeDef posnDef← (800 1000) (5 5)                  ⍝ size: height, width; posn: y, x 
  exampleT← ''                                       ⍝ See  ∇ example ∇  
:EndSection ⍝ Main_Routines

:Section Internal_Utilities
⍝ -------------------------------------------------------------------------------------------
  ⍝ *** InsertMD ***
  ⍝ InsertMD:   CVV← CVV ∇ CVV                             
  ⍝   Insert ⍺:markdown into ⍵:html at ___MYTEXT___
  ⍝   Don't process escape chars in the replacement field...
  InsertMD← {  
      '^\h*___MYTEXT___.*$'  ⎕R ⍵ RE._Simple RE._Once RE._RE10⊢ ⍺ 
  }
  ⍝ *** Flat ***
  ⍝ Flat:  CcrV← ∇ CVV                               
  ⍝   Convert vector of char vectors into a CV with carriage returns.
  Flat← {¯1↓ ∊⍵,¨ CR}⊆
  
  ⍝ *** HtmlRender ***
  ⍝ HtmlRender: ns.htmlObj@HTMLRenderer_obj← size@I2 posn@I2 ∇ html@CVV
  ⍝   Returns an html renderer object generated by ⎕WC.
  HtmlRender← {  
    s p← ⍺ 
    parms← ('HTML',⍥⊂ ⍵) (s,⍨ ⊂'Size') (p,⍨ ⊂'Posn') ('Coord' 'ScaledPixel')
    ns← #.⎕NS⍬                                       ⍝ Private ns for generated obj 
    _← 'ns.htmlObj' ⎕WC 'HTMLRenderer',⍥⊆ parms     ⍝ Generate the renderer as ns.htmlObj. 
    ns.htmlObj                                        ⍝ Return the generated object itself.
  }  

  ⍝ *** MergeOpts ***
  ⍝ MergeOpts: 
  ⍝    ∘ Load old Markdown options (in Json format);
  ⍝    ∘ Merge any new options passed from APL, replacing 0 and 1 with (⊂'false') and (⊂'true'); 
  ⍝    ∘ Separate off the pseudo-option `size: [n1 n2]` and returning separately as (n1 n2);
  ⍝    ∘ Replace the ___OPTS___ stub in the HTML code with the up-to-date Json options.
    ⍝ JMerge: 
    ⍝   ∘ Merge new APL-specified options into existing Json options
    ⍝   ∘ Returning the new or default size@IV[2]
    ⍝ ((sizeOut@I[2] posnOut@I[2]) jsonOut@CVV)← [jsonIn←''] (sizeDef@I[2] posnDef@I[2] ∇) opt1 [opt2 ...]
    ⍝ jsonIn:
    ⍝   a Json5 list of key-value pairs or null.
    ⍝ sizeDef, posnDef
    ⍝   the default size/posn variables for use in an HTMLRenderer call.
    ⍝   ∘ Each has 2 items: (integers: height, width) and posn (integers: y and x offsets)
    ⍝   ∘ Their value  will be the ¨size¨ and ¨posn¨ returned, unless an option overrides it.
    ⍝ optN:
    ⍝   an APL-style key-value pair of the form ('Name' value).
    ⍝   A value of 1 or 0 will be replaced by ⊂'true' or ⊂'false', respectively.
    ⍝   Special case: keys 'size' and 'posn' will have their value replace the default size.
    ⍝       The size value must be of the form (height width);
    ⍝       The posn value must be of the form (y and x offsets):
    ⍝       ('size' (1000 600)) and ('posn' (5 5)) 
    ⍝ sizeOut, posnOut
    ⍝   The values set per above, either the defaults or explicitly set values.
    ⍝ jsonOut:
    ⍝   The 2nd element returned; a char. string representing the udpated
    ⍝   JSON5 key-value pairs.
  MergeOpts← { 
    optE← 'Options must consist of exactly two items: a keyword and a scalar value' 11
    JMerge←{   
        hNms← 'size' 'posn'
        _J5← ⍠'Dialect' 'JSON5' 
        JIn← { 0=≢⍵:⎕NS ⍬ ⋄ ⎕JSON _J5  ⍵ }   
        List← { ,∘⊂⍣(2=|≡⍵)⊢ ⍵ }                  ⍝ Convert single opt (depth 2) to list (depth 3)
        ⍙Map←{(1 0⍳⊂⍵)⊃(⊂⊂'true')(⊂⊂'false')⍵}    ⍝ APL 1 0 => Json true false 
        ⍙Set← { ⍺ ⍺⍺.{ ⍎⍺,'←⍵' } ⍵ }              ⍝ Merge new (APL) options into (Json) default values
        Merge← {(⍺ ⍙Set∘⍙Map)/¨⍵} 
        HOut← 'ns.' { 0≠ ⎕NC ⍺⍺,⍺: (⎕EX ⍺⍺,⍺)⊢ ⎕OR ⍺⍺,⍺ ⋄ ⍵ }
      ⍝ ----------
        ⍺← '{}' 
        j hDef← ⍺ ⍺⍺
      0=≢⍵:  j,⍨⍥⊂ hDef  
        opts← List ⍵
      2∨.≠ ≢¨ opts: ⎕SIGNAL/ optE 
        ns← JIn j ⋄ _← ns Merge opts
        hOpts← hNms HOut¨ hDef
        hOpts,⍥⊂  ⎕JSON _J5 ns 
    }
    optsApl src← ⍺ ⍵ 
    jStub← '___OPTS___'
    jOld← '{', CR, (Flat 'JO' Here src), CR, '}'                 ⍝ J: Default JSON
    s_p jCur← jOld (sizeDef posnDef JMerge) optsApl              ⍝ s_p: size pair and posn pair
    JUpdate← jStub ⎕R jCur RE._Simple RE._Once                      
    s_p,⍥⊂ JUpdate 'HT' Here src                                 ⍝ H: Includes stub for JSON
  } 
:EndSection ⍝ Internal_Utilities

:Section Regular_Expressions
  :Namespace RE
     _Simple← ⍠('ResultText' 'Simple')('EOL' 'CR')
     _Once←   ⍠'ML' 1
     _RE10←   ⍠'Regex' (1 0)
  :EndNamespace 
:EndSection ⍝ Regular_Expressions 

:Section Alien 
  :Section Example 
⍝ -------------------------------------------------------------------------------------------
⍝  example: Markdown example source 
   ⍝EX # An example of *Markdown* in the ***Showdown*** dialect
   ⍝EX
   ⍝EX
   ⍝EX ## A Paragraph (1)
   ⍝EX
   ⍝EX This shows how to separate lines of a paragraph via 2 trailing spaces, 
   ⍝EX just like **this:**  
   ⍝EX there are 2 spaces after the characters **this:** above.
   ⍝EX 
   ⍝EX ## A Paragraph (2)
   ⍝EX This is a paragraph with **bold** text and this Emoji smile :smile: is generated via 
   ⍝EX the expression :smile\:.  Since ('simpleLineBreaks' 0) is the default, 
   ⍝EX a single paragraph can be generated from multiple contiguous lines, as long as none
   ⍝EX has 3 (or more) trailing spaces. We have five (5) such lines here making one paragraph. 
   ⍝EX This face 😜 is represented _directly_ in APL. 
   ⍝EX
   ⍝EX **Note**:
   ⍝EX If you want contiguous lines to include linebreaks, set ***('simpleLineBreaks' 1)***
   ⍝EX in the *APL* options.
   ⍝EX 
   ⍝EX #### These lines produce level 1 (#) and level 2 (##) headings:
   ⍝EX 
   ⍝EX      This is a level 1 heading!
   ⍝EX      ==========================
   ⍝EX 
   ⍝EX      This is a level 2 heading.
   ⍝EX      --------------------------
   ⍝EX 
   ⍝EX #### Below are the level 1 and level 2 headings produced from the source above!
   ⍝EX 
   ⍝EX This is a level 1 heading!
   ⍝EX ==========================
   ⍝EX 
   ⍝EX This is a level 2 heading.
   ⍝EX --------------------------
   ⍝EX 
   ⍝EX 1. This is a bullet
   ⍝EX      * This is a *sub-*bullet.
   ⍝EX           * A sub***ber*** bullet.
   ⍝EX           * And another!
   ⍝EX 1. This is another top-level bullet. 
   ⍝EX 1. As is this.
   ⍝EX      We right now do NOT allow simplified autolinks to places like http://www.dyalog.com.
   ⍝EX
   ⍝EX     > A blockquote would look great here...
   ⍝EX
   ⍝EX 1. A final bullet?
   ⍝EX 
   ⍝EX ### Tonnage of [Columbus' Ships](http://columbuslandfall.com/ccnav/ships.shtml)\. 
   ⍝EX 
   ⍝EX   | Ship  | Niña    | Pinta | Santa Maria |
   ⍝EX   |: ---- |: ----- :|:-----:|:-----:|
   ⍝EX   | Type | caravel | caravel | carrack |
   ⍝EX   | Tonnage | 50-60 tons   | 70 tons  | 100 tons |
   ⍝EX   | Perceived size | ~~big~~| ~~bigger~~ | ~~gigantic~~ |
   ⍝EX   | Actual size| shrimpy shrimp | small shrimp | jumbo shrimp |
   ⍝EX
   ⍝EX **Note**: The above link to Columbus' Ships is an *explicit* link.
   ⍝EX
   ⍝EX ----
   ⍝EX 
   ⍝EX This is code: `⍳2` 
   ⍝EX 
   ⍝EX This is *also* code: <code>⍳3</code> 
   ⍝EX 
   ⍝EX And so is this:
   ⍝EX 
   ⍝EX      ⍝ Set off with 6 blanks
   ⍝EX        ∇ P← A IOTA B
   ⍝EX          P← A ⍳ B
   ⍝EX        ∇
   ⍝EX
   ⍝EX This should work. Does it? (**Yes**)
   ⍝EX ```
   ⍝EX +/⍺⍳⍵
   ⍝EX -\⍵⍳⍺
   ⍝EX ```
   ⍝EX
   ⍝EX ### What about tasks?
   ⍝EX + [x] This task is done
   ⍝EX - [ ] This is still pending
   ⍝EX + [x] We knocked this out of the park!
   ⍝EX 
   ⍝EX ### Goodbye:exclamation::exclamation::exclamation:
   ⍝EX 
  :EndSection 

  :Section HTML_Code 
⍝ -------------------------------------------------------------------------------------------
⍝  Markdown-to-Html code-- "showdown" javascript
   ⍝HT <!DOCTYPE html>
   ⍝HT <html>
   ⍝HT <head>
   ⍝HT   <title>Showdown Example</title>
   ⍝HT   <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js" 
   ⍝HT        integrity="sha512-LhccdVNGe2QMEfI3x4DVV3ckMRe36TfydKss6mJpdHjNFiV07dFpS2xzeZedptKZrwxfICJpez09iNioiSZ3hA==" 
   ⍝HT        crossorigin="anonymous" referrerpolicy="no-referrer">
   ⍝HT   </script>
   ⍝HT </head>
   ⍝HT <body>
   ⍝HT   <div id="markdown-content" style="display:none;">
   ⍝HT     ___MYTEXT___             // User Markdown will go here...
   ⍝HT   </div>
   ⍝HT   <div id="html-content"></div>
   ⍝HT   <script>
   ⍝HT     var markdownText = document.getElementById('markdown-content').textContent;
   ⍝HT     var opts = ___OPTS___;    // Json Markdown options go here...
   ⍝HT     const converter = new showdown.Converter(opts);
   ⍝HT     const html = converter.makeHtml(markdownText);
   ⍝HT     document.getElementById('html-content').innerHTML = html;
   ⍝HT   </script>
   ⍝HT </body>
   ⍝HT </html>
  :EndSection 

  :Section Json Options
⍝ -------------------------------------------------------------------------------------------
⍝  Json Markdown Option Defaults. Used in place of ___OPTS___ above 
⍝     var opts = {
   ⍝JC      // Json Markdown options (Showdown dialect)
   ⍝JC      // ∘ For all binary (true/false) options except ghCodeBlocks, 
   ⍝JC      //   the "built-in" default value is (false), potentially overridden here!
   ⍝JC      // -------------------------------------------------------------------------------
   ⍝JC      // Simple line break: If true, simple line break in paragraph emits <br>.
   ⍝JC      //                    If false (default), simple line break does not emit <br>.
   ⍝JO         simpleLineBreaks: false, 
   ⍝JC      // Enable tables 
   ⍝JO         tables: true,
   ⍝JC      // Enable strikethrough 
   ⍝JO         strikethrough: true,
   ⍝JC      // Omit extra line break in code blocks
   ⍝JO         omitExtraWLInCodeBlocks: true,
   ⍝JC      // Enable GitHub-compatible header IDs
   ⍝JO         ghCompatibleHeaderId: true,
   ⍝JC      // Fenced code blocks. True (default), enable code blocks with ``` ... ``` 
   ⍝JO         ghCodeBlocks: true,
   ⍝JC      // Prefix header IDs with "custom-id-"
   ⍝JO         prefixHeaderId: 'custom-id-',
   ⍝JC      // Enable emoji support 
   ⍝JO         emoji: true,
   ⍝JC      // Enable task lists 
   ⍝JO         tasklists: true,
   ⍝JC      // Disable automatic wrapping of HTML blocks
   ⍝JO         noHTMLBlocks: false,
   ⍝JC      // Allow simple URLs like http://dyalog.com in text to be treated as actual links. 
   ⍝JC      // Keep in mind that selecting a link will leave the Markdown page, w/o an easy way  
   ⍝JC      // to return (except by recreating the page).
   ⍝JO         simplifiedAutoLink: false,         
   ⍝JC      // Enable support for setting image dimensions in Markdown,  
   ⍝JC      //      e.g. ![foo](foo.jpg =100x80)  OR ![baz](baz.jpg =80%x5em)
   ⍝JO         parseImgDimensions: false,  
⍝    }
  :EndSection 

  :Section Help 
   ⍝HLP ## Markdown Utility (namespace)
   ⍝HLP 
   ⍝HLP | | |
   ⍝HLP |: --- :|: --- |
   ⍝HLP | :arrow_forward: |Use Markdown in an HTMLRenderer session in Dyalog|
   ⍝HLP | :arrow_forward: |Based on the **Showdown** dialect of *Markdown*. See: https://showdownjs.com/. |
   ⍝HLP 
   ⍝HLP ## Key Routines
   ⍝HLP 
   ⍝HLP | Routine | Usage                                                   |         | Call   | Syntax |       |
   ⍝HLP |: ----   |: ---                                                    |   ---  :|: ---  :|   ---  |: ---  |
   ⍝HLP | Show    | Process and Display Markdown text via the HTMLRenderer  | HtmlNs← | [opts] | ∇      | CVV   |
   ⍝HLP | example | A bells-and-whistles Markdown example                   |CVV←     |        | ∇      |       |
   ⍝HLP | help    | Display (this) help information |[HtmlNs←]|| ∇ ||
   ⍝HLP | defaults | Show Markdown & HTMLRenderer defaults used |CV←||∇||
   ⍝HLP | Here | Pull Markdown from APL comments '⍝tok' in ⍵, a vector of "strings" | CVV← |'tok' |∇ | CVV |
   ⍝HLP |      | where ⍵ may be `⎕SRC ⎕THIS`, `⎕NR ⊃⎕XSI`, etc. |   |  |  |   |
   ⍝HLP | Flat | Convert APL char vector of vectors to a simple char vector (with CR's) | CV← || ∇ | CVV |
   ⍝HLP 
   ⍝HLP 
   ⍝HLP ## Using Markdown.Show:
   ⍝HLP 
   ⍝HLP [**html**←]  [**options**] *Markdown.Show* **markdown** 
   ⍝HLP 
   ⍝HLP where **markdown** is 
   ⍝HLP 
   ⍝HLP - a vector of character vectors containing standard "Showdown-style" Markdown, 
   ⍝HLP often extracted (via Markdown.Here) from comments in the current function or namespace.
   ⍝HLP 
   ⍝HLP and **options** are
   ⍝HLP 
   ⍝HLP - APL Variant (⍠) style specifications of [𝟏] HTMLRenderer and [𝟐] Markdown JSON5 options.      
   ⍝HLP    
   ⍝HLP *Markdown.Show* returns the value **html**,
   ⍝HLP
   ⍝HLP - an HTMLRenderer-generated namespace, augmented with MD, a copy of the generated Markdown source;
   ⍝HLP - When the variable html goes out of scope or is expunged, the HTML object rendered disappears.
   ⍝HLP                             
   ⍝HLP ### Options sent to HTMLRenderer
   ⍝HLP | Show option | What HTMLRenderer sees | 
   ⍝HLP |: ---- |: ----- | 
   ⍝HLP |   ('size' (800 1000))              | ('Size' 800 1000) |         
   ⍝HLP |   ('posn' (5 5))                   | ('Posn' 5 5) |  
   ⍝HLP 
   ⍝HLP ### Options converted to Json5 and sent to Javascript Markdown Showdown translator 
   ⍝HLP | Show option | What Markdown sees | 
   ⍝HLP |: ---- |: ----- |          
   ⍝HLP |   ('simpleLineBreaks' 0)           | simpleLineBreaks: false,  |            
   ⍝HLP |   ('tables' 1)                     | tables: true,      |                   
   ⍝HLP |   ('strikethrough' 1)              |  strikethrough: true,   |               
   ⍝HLP |   ('omitExtraWLInCodeBlocks' 1)    |  omitExtraWLInCodeBlocks: true,  |      
   ⍝HLP |   ('ghCompatibleHeaderId' 1)       |  ghCompatibleHeaderId: true, |          
   ⍝HLP |   ('ghCodeBlocks' 1)               |  ghCodeBlocks: true,   |                
   ⍝HLP |   ('prefixHeaderId' 'custom-id-')  |  prefixHeaderId: 'custom-id-',   |      
   ⍝HLP |   ('emoji' 1)                      |  emoji: true,           |               
   ⍝HLP |   ('tasklists' 1)                  |  tasklists: true,       |               
   ⍝HLP |   ('noHTMLBlocks' 0)               |  noHTMLBlocks: false,    |              
   ⍝HLP |   ('simplifiedAutoLink' 0)         |  simplifiedAutoLink: false  | 
   ⍝HLP |   ('parseImgDimensions' 0)         |  parseImgDimensions: false, |
   ⍝HLP  
   ⍝HLP ### Notes
   ⍝HLP |     |     |
   ⍝HLP | --- | --- |
   ⍝HLP | 𝟭. | See **Showdown** documention, especially for the Github options.| 
   ⍝HLP ||E.g. https://github.com/showdownjs/showdown (general)|
   ⍝HLP ||E.g. https://github.com/showdownjs/showdown/wiki/emojis (showdown emojis)|
   ⍝HLP | 𝟮. | Call **Markdown.defaults** for the list of option variables (shown in Javascript format).|
   ⍝HLP 
   ⍝HLP ### Markdown.Show
   ⍝HLP Show returns the resulting HTML as a vector of character vectors.
   ⍝HLP 
   ⍝HLP 🛈 To see the returned HTML, store the result of ¨Show¨ in a variable:
   ⍝HLP
   ⍝HLP         html← Markdown.Show example
   ⍝HLP 
   ⍝HLP 🛈 To remove the returned HTML permanently, delete or reset the variable:
   ⍝HLP
   ⍝HLP         ⎕EX 'html'    OR     html←''
   ⍝HLP 
   ⍝HLP 🛈 To temporarily stop displaying the returned HTML, set html variable "visible" to 0:
   ⍝HLP
   ⍝HLP         html.visible←0     ⍝ To redisplay, html.visible←1
   ⍝HLP 
   ⍝HLP 🛈 To view the markdown example source:
   ⍝HLP 
   ⍝HLP          ⎕ED 'html.MD'    
   ⍝HLP      OR 
   ⍝HLP          {⎕ED 't'⊣t←⍵} Markdown.example
   ⍝HLP 
   ⍝HLP 🛈 See HTMLRenderer for other APL-side variables.
   ⍝HLP  
   ⍝HLP ### Markdown Utilities and Examples
   ⍝HLP #### :arrow_forward: Markdown.defaults 
   ⍝HLP      returns all the HTML-directed and Markdown Showdown-dialect Json5 variables.
   ⍝HLP 
   ⍝HLP #### :arrow_forward: Markdown.Here
   ⍝HLP makes it easy to take comments in APL functions or namespaces and return them as Markdown or HTML code.
   ⍝HLP 
   ⍝HLP        vv← 'tok' Markdown.Here ⊃⎕XSI         ⍝ Find APL comment line '⍝tok' in the current function.
   ⍝HLP        vv← 'tok' Markdown.Here ⎕SRC ⎕THIS    ⍝ Find APL comment line '⍝tok' in the current namespace.
   ⍝HLP 
   ⍝HLP #### :arrow_forward: Markdown.Flat 
   ⍝HLP converts a vector of character vectors to a flat char vector with carriage returns. 
   ⍝HLP 
   ⍝HLP #### :arrow_forward: Markdown.example 
   ⍝HLP contains a nice example. (See also the source for Markdown.help)
   ⍝HLP 
   ⍝HLP 🛈 To see the example source, do:
   ⍝HLP 
   ⍝HLP        ⎕ED 'a'⊣ a← Markdown.example
   ⍝HLP 
   ⍝HLP 🛈 To see the result, do: 
   ⍝HLP  
   ⍝HLP        x← Markdown.(Show example)
   ⍝HLP 
   ⍝HLP #### :arrow_forward: Markdown.help
   ⍝HLP displays help information for this Markdown namespace.
   ⍝HLP 
   ⍝HLP        Markdown.help 
   ⍝HLP
   ⍝HLP The source for markdown help can be viewed several ways, including this one:
   ⍝HLP
   ⍝HLP       {⎕ED 't.MD'⊣ t← ⍵} Markdown.help
   ⍝HLP  
  :EndSection 
:EndSection ⍝ Alien  
:EndNamespace 
