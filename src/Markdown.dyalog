:Namespace Markdown
⍝⍝⍝⍝ Use Markdown in an HTMLRenderer session in Dyalog
⍝⍝⍝⍝ Usage:
⍝⍝⍝⍝   [html←]  [size] Markdown.Show markdown
⍝⍝⍝⍝ where ¨markdown¨ is a vector of character vectors containing standard "Showdown-style" Markdown.
⍝⍝⍝⍝ and ¨size¨ is an optional size in pixels of the resulting page.
⍝⍝⍝⍝ Default: ('size' (800 1000)); this spec is passed to HTMLRenderer as ('Size' 800 1000).
⍝⍝⍝⍝ ¨Show¨ returns the resulting HTML as a vector of character vectors.
⍝⍝⍝⍝ 
⍝⍝⍝⍝ There are a couple of useful utilities, such as ¨Here¨ and ¨Flat¨.
⍝⍝⍝⍝ ¨Here¨ makes it easy to take comments in APL functions and return them as Markdown or HTML code.
⍝⍝⍝⍝ ¨Flat¨ converts a vector of character vectors to a flat char vector with carriage returns. 
⍝⍝⍝⍝
⍝⍝⍝⍝   Markdown.example
⍝⍝⍝⍝ contains a nice example. To see the result, do:
⍝⍝⍝⍝   x← Markdown.(Show example)
⍝⍝⍝⍝ Deleting ¨x¨ (or resetting its value) will remove the displayed markdown html.
⍝⍝⍝⍝ 
  ⍝ Show:     hNs@CVV← newOpts ∇ markdown@CVV
  ⍝ markdown: APL char vectors (CVV)  
  ⍝ newOpts:  New options for size and JSON option variables. Of the form
  ⍝          ('emoji' 0), ('tables' 1), ('size' (500 400)), 1 for ⊂'true',  0 for ⊂'false'.
  ⍝ hNs:      Dyalog Render object (⎕WC namespace)
  ⍝           hNs.HTML contains the generated HTML as a character vector with CR's (via HTMLRenderer)
  ⍝           hNs.MD contains the source markdown used to generate it.
  ⍝ Once the result returned disappears, the generated HTML object disappears also.
  ⍝ Do:              h← size Markdown.Show ... 
  ⍝ Then to delete:  ⎕EX 'h' OR h←''
  Show←{
    ⍺← '' ⋄ markdown← ⍵ 
    s hj← ⍺ OMerge ⎕SRC ⎕THIS 
    html← hj InsertMD Flat markdown                 ⍝ Insert the markdown text into the HTML/JS code   
    r← s HtmlRender html                            ⍝ Render and return the HTML object
    r⊣ r.MD← ⍵                                      ⍝ Make a private copy of the markdown from the user...
  }
  ⍝ Here: CVV← token@CV ∇ CVV                    
  ⍝   Find payload in char vectors (CV) following ('^\h*⍝',token,'\h|$') in a vector of CV's. 
  ⍝     - If the token is 'XX', we match /^\h*⍝XX/ followed by /\h|$/. 
  ⍝       I.e., it will match XX, but not (simple) X, XY, XXX, etc.
  ⍝     - If the "token" is 'XX?' or 'X{1,2}', we will match X, XX, but not XY or XXX.
  ⍝   What follows the token and any following blank is the payload /(.*)/'. 
  Here← {  pfx← ⍺
    re←'^\h*⍝', pfx, '(?:\h|$)(.*)'                        
    re ⎕S '\1'⊣ ⍵ 
  }
  ⍝ defaults: d← ∇
  ⍝   Show the default options in JSON format, including 'size' used on the HTMLRenderer page.
  ∇ d← defaults  ; n; siz 
    size← '   size: [', ']',⍨ 1↓∊',',¨⍕¨sizeDef 
    d← '{', CR, '}',⍨ size, CR, '^\s+' ⎕R '   '_RSimple⊢ 'J' Here ⎕SRC ⎕THIS 
  ∇
  ⍝ InsertMD:   CVV← CVV ∇ CVV                             
  ⍝   Insert ⍺:markdown into ⍵:html at ___MYTEXT___
  ⍝   Don't process escape chars in the replacement field...
  InsertMD← {  
      '^\h*___MYTEXT___.*$'  ⎕R ⍵ _RSimple _ROnce _RRE10⊣ ⍺ 
  }
  ⍝ Flat:  CcrV← ∇ CVV                               
  ⍝   Convert vector of char vectors into a CV with carriage returns.
  Flat← {¯1↓ ∊⍵,¨ CR}⊆
  ⍝ ⎕R options we use...
  _RSimple← ⍠('ResultText' 'Simple')('EOL' 'CR')
  _ROnce←   ⍠'ML' 1
  _RRE10←   ⍠'Regex' (1 0)

  CR← ⎕UCS 13 
  sizeDef← 800 1000
  example← 'M' Here ⎕SRC ⎕THIS                       ⍝ a markdown example.  
  
  ⍝ HtmlRender: Ø← size@I[2] ∇ html@CVV
  ⍝   Returns an html renderer object generated by ⎕WC.
  HtmlRender← {  
    parms← ('HTML',⍥⊂ ⍵) (⍺,⍨ ⊂'Size') ('Coord' 'ScaledPixel') 
    ns← #.⎕NS⍬                                       ⍝ Private ns for generated obj 
    _← 'ns.Render' ⎕WC 'HTMLRenderer',⍥⊆ parms       ⍝ Generate the renderer as ns.o. 
    ns.Render                                        ⍝ Return the generated object itself.
  }  

  ⍝ OMerge: 
  ⍝    ∘ Load old Markdown options (in JSON format);
  ⍝    ∘ Merge any new options passed from APL, replacing 0 and 1 with (⊂'false') and (⊂'true'); 
  ⍝    ∘ Separate off the pseudo-option `size: [n1 n2]` and returning separately as (n1 n2);
  ⍝    ∘ Replace the ___OPTS___ stub in the HTML code with the up-to-date JSON options.
    ⍝ Merge1: 
    ⍝   ∘ Merge new APL-specified options into existing Json options
    ⍝   ∘ Returning the new or default size@IV[2]
    ⍝ (size@IV[2] jsonOut@CVV)← [jsonIn←''] (sizeDef@IV[2] ∇) opt1 [opt2 ...]
    ⍝ jsonIn:
    ⍝   a JSON5 list of key-value pairs or null.
    ⍝ sizeDef:
    ⍝   the default size variable for use in an HTMLRenderer call.
    ⍝   The size has two elements: height and width.
    ⍝   It will be the value of ¨size¨ returned, unless an option overrides it.
    ⍝ optN:
    ⍝   an APL-style key-value pair of the form ('Name' value).
    ⍝   A value of 1 or 0 will be replaced by ⊂'true' or ⊂'false', respectively.
    ⍝   Special case: a key of 'size' will have its value replace the default size.
    ⍝       The size value must be of the scalar form (height width):
    ⍝       ('size' (1000 600))
    ⍝   It will be the value returned as ¨size¨ above.
    ⍝ jsonOut:
    ⍝   The 2nd element returned; a char. string representing the udpated
    ⍝   JSON5 key-value pairs.
  OMerge← { 
    JMerge←{
      T F← ⊂∘⊂¨'true' 'false'   ⍝ JSON true (1) and false (0)
      Json← ⎕JSON⍠'Dialect' 'JSON5'
      JImport← {0=≢⍵:⎕NS ⍬ ⋄ Json ⍵}
      Canon← { ,∘⊂⍣(2≥|≡⍵)⊢ ⍵ }
      J2A← { ⍺ ⍺⍺.{⍎⍺,'←⍵'}⊃T F ⍵/⍨1,⍨1 0≡¨ ⊂⍵ }
      GetSize← 'ns.size'∘{ 0≠ ⎕NC ⍺: (⎕EX ⍺)⊢ ⎕OR ⍺ ⋄ ⍵ }
      ⍺← '{}' ⋄ j sizeDef← ⍺ ⍺⍺
      0=≢⍵: sizeDef,⍥⊂ j
      ns← JImport j ⋄ _← (ns J2A)/¨ Canon ⍵
      (Json ns),⍨⍥⊂ GetSize sizeDef
    }
    optsApl← ⍺ 
    jStub← '___OPTS___'
    jOld← '{', CR, (Flat 'J' Here ⍵), CR, '}'                 ⍝ J: Default JSON
    size jNow← jOld (sizeDef JMerge) optsApl  
    JUpdate← jStub ⎕R jNow _RSimple _ROnce 'H'∘Here                        
    size,⍥⊂ JUpdate ⍵                                         ⍝ H: Includes stub for JSON
  } 

⍝ -------------------------------------------------------------------------------------------
⍝  example: Markdown example source 
⍝M # An example of *Markdown* in the ***Showdown*** dialect
⍝M
⍝M ## A Paragraph
⍝M This is a paragraph with **bold** text and this Emoji smile :smile: is generated via 
⍝M the expression :smile\:.  By ***default***, we have set **simpleLineBreaks: false**, so 
⍝M a single paragraph can be generated from multiple contiguous lines.
⍝M We have four such lines here making one paragraph. This face 😜 is represented _directly_ in APL. 
⍝M
⍝M **Note**:
⍝M If you want contiguous lines to include linebreaks, set ***('simpleLineBreaks' 1)***
⍝M in the *APL* options.
⍝M 
⍝M 1. This is a bullet
⍝M      * This is a *sub-*bullet.
⍝M           * A sub***ber*** bullet.
⍝M           * And another!
⍝M 1. This is another top-level bullet. 
⍝M 1. As is this.
⍝M      We right now do NOT allow simplified autolinks to places like http://www.dyalog.com.
⍝M
⍝M     > A blockquote would look great here...
⍝M
⍝M 1. A final bullet?
⍝M 
⍝M ### Tonnage of [Columbus' Ships](http://columbuslandfall.com/ccnav/ships.shtml)\. 
⍝M 
⍝M   | Ship  | Niña    | Pinta | Santa Maria |
⍝M   |: ---- |: ----- :|:-----:|:-----:|
⍝M   | Type | caravel | caravel | carrack |
⍝M   | Tonnage | 50-60 tons   | 70 tons  | 100 tons |
⍝M   | Perceived size | ~~big~~| ~~bigger~~ | ~~gigantic~~ |
⍝M   | Actual size| shrimpy shrimp | small shrimp | jumbo shrimp |
⍝M
⍝M **Note**: The above link to Columbus' Ships is an *explicit* link.
⍝M
⍝M ----
⍝M 
⍝M This is code: `⍳2` 
⍝M 
⍝M This is *also* code: <code>⍳3</code> 
⍝M 
⍝M And so is this:
⍝M 
⍝M      ⍝ Set off with 6 blanks
⍝M        ∇ P← A IOTA B
⍝M          P← A ⍳ B
⍝M        ∇
⍝M
⍝M This should work. Does it? (**Yes**)
⍝M ```
⍝M +/⍺⍳⍵
⍝M -\⍵⍳⍺
⍝M ```
⍝M
⍝M ### What about tasks?
⍝M + [x] This task is done
⍝M - [ ] This is still pending
⍝M + [x] We knocked this out of the park!
⍝M 
⍝M ### Goodbye:exclamation::exclamation::exclamation:
⍝M 

⍝ -------------------------------------------------------------------------------------------
⍝  Markdown-to-Html code-- "showdown" javascript
⍝H <!DOCTYPE html>
⍝H <html>
⍝H <head>
⍝H   <title>Showdown Example</title>
⍝H   <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js" 
⍝H        integrity="sha512-LhccdVNGe2QMEfI3x4DVV3ckMRe36TfydKss6mJpdHjNFiV07dFpS2xzeZedptKZrwxfICJpez09iNioiSZ3hA==" 
⍝H        crossorigin="anonymous" referrerpolicy="no-referrer">
⍝H   </script>
⍝H </head>
⍝H <body>
⍝H   <div id="markdown-content" style="display:none;">
⍝H     ___MYTEXT___          // User Markdown will replace this entire line!
⍝H   </div>
⍝H   <div id="html-content"></div>
⍝H   <script>
⍝H     var markdownText = document.getElementById('markdown-content').textContent;
⍝H     var opts = ___OPTS___;    // Stub for JSON options
⍝H     const converter = new showdown.Converter(opts);
⍝H     const html = converter.makeHtml(markdownText);
⍝H     document.getElementById('html-content').innerHTML = html;
⍝H   </script>
⍝H </body>
⍝H </html>

⍝ -------------------------------------------------------------------------------------------
⍝  JSON Option Defaults. Used in place of ___OPTS___ above 
⍝     var opts = {
⍝        // For all options except ghCodeBlocks, the DEFAULT value is false
⍝        // Simple line break: If true, simple line break in paragraph emits <br>.
⍝        //                    If false (default), simple line break does not emit <br>.
⍝J          simpleLineBreaks: false, 
⍝        // Enable tables 
⍝J          tables: true,
⍝        // Enable strikethrough 
⍝J          strikethrough: true,
⍝        // Omit extra line break in code blocks
⍝J          omitExtraWLInCodeBlocks: true,
⍝        // Enable GitHub-compatible header IDs
⍝J          ghCompatibleHeaderId: true,
⍝        // Fenced code blocks. True (default), enable code blocks with ``` ... ``` 
⍝J          ghCodeBlocks: true,
⍝        // Prefix header IDs with "custom-id-"
⍝J          prefixHeaderId: 'custom-id-',
⍝        // Enable emoji support 
⍝J          emoji: true,
⍝        // Enable task lists 
⍝J          tasklists: true,
⍝        // Disable automatic wrapping of HTML blocks
⍝J          noHTMLBlocks: false,
⍝        // Allow simple URLs like http://dyalog.com in text to be treated as actual links. 
⍝        // Keep in mind that selecting a link will leave the Markdown page, w/o an easy way  
⍝        // to return (except by recreating the page).
⍝J          simplifiedAutoLink: false,           
⍝    }
:EndNamespace 
