:Namespace Markdown
⍝⍝⍝⍝ Use Markdown in an HTMLRenderer session in Dyalog
⍝⍝⍝⍝ Usage:
⍝⍝⍝⍝   [html←]  [size] Markdown.Show markdown
⍝⍝⍝⍝ where ¨markdown¨ is a vector of character vectors containing standard "Showdown-style" Markdown.
⍝⍝⍝⍝ and ¨size¨ is an optional size in pixels of the resulting page (default: 800 1000).
⍝⍝⍝⍝ ¨Show¨ returns the resulting HTML as a vector of character vectors.
⍝⍝⍝⍝ 
⍝⍝⍝⍝ There are a couple of useful utilities, such as ¨Here¨ and ¨Flat¨.
⍝⍝⍝⍝ ¨Here¨ makes it easy to take comments in APL functions and return them as Markdown or HTML code.
⍝⍝⍝⍝ ¨Flat¨ convers a vector of character vectors to a flat char vector with carriage returns. 
⍝⍝⍝⍝
⍝⍝⍝⍝   Markdown.example
⍝⍝⍝⍝ contains a nice example. To see the result, do:
⍝⍝⍝⍝   x← Markdown.(Show example)
⍝⍝⍝⍝ Deleting ¨x¨ (or resetting its value) will remove the displayed markdown html.
⍝⍝⍝⍝ 
  ⍝ Here: CVV← token@CV ∇ CVV                    
  ⍝   Find payload in char vectors (CV) matching ('^\h*⍝',token) in a vector of CV's. 
  ⍝     - If the token is XX, we match /^\h*⍝XX/ followed by /\h|$/. 
  ⍝       I.e., it will match XX, but not X, XY, XXX, etc.
  ⍝     - If the "token" is XX? or X{1,2}, we will match X, XX, but not XY or XXX.
  ⍝   What follows /.*$/ is the payload. 
  Here← { 
    re←'^\h*⍝', ⍺, '(?:\h|$)(.*)'                        
    re ⎕S '\1'⊣ ⍵ 
  }
  ⍝ MD:   CVV← CVV ∇ CVV                             
  ⍝   Insert ⍺:markdown into ⍵:html at ___MYTEXT___
  ⍝   Double any escape chars so they work in the replacement field.
  MD← { 
      _Once← ⍠('ML' 1) 
      Esc_← '\\' ⎕R '\\\\'      
      from to← '^\h*___MYTEXT___.*$' (Flat Esc_ ⍺)
      from  ⎕R to _Once⊣ ⍵ 
  }
  ⍝ Flat:  CcrV← ∇ CVV                               
  ⍝   Convert vector of char vectors into a CV with carriage returns.
  Flat← {¯1↓ ∊⍵,¨ ⎕UCS 13}⊆
:Namespace Html 
  ⍝ Html.Render: Ø← size@I[2] ∇ html@CVV
  ⍝   Returns an html renderer object generated by ⎕WC.
  Render← {  
    parms← ('HTML',⍥⊂ ##.Flat ⍵) (⍺,⍨ ⊂'Size') ('Coord' 'ScaledPixel') 
    ns← #.⎕NS⍬                                    ⍝ Private ns for generated obj 
    _← 'ns.o' ⎕WC 'HTMLRenderer',⍥⊆ parms         ⍝ Generate the renderer as ns.o. 
    ns.o                                          ⍝ Return the generated object itself.
  } 
:EndNamespace 
:Namespace Json 
   Opts2Json←{
   ⍝ (size jsonOut)← [jsonIn←''] (sizeDef ∇) opt1 [opt2 ...]
   ⍝ jsonIn:
   ⍝   a JSON5 list of key-value pairs or null.
   ⍝ sizeDef:
   ⍝   the default size variable for use in an HTMLRenderer call.
   ⍝   The size has two elements: height and width.
   ⍝   It will be the value of ¨size¨ returned, unless an option overrides it.
   ⍝ optN:
   ⍝   an APL-style key-value pair of the form ('Name' value).
   ⍝   A value of 1 or 0 will be replaced by ⊂'true' or ⊂'false', respectively.
   ⍝   Special case: a key of 'size' will have its value replace the default size.
   ⍝       The size value must be of the scalar form (height width):
   ⍝       ('size' (1000 600))
   ⍝   It will be the value returned as ¨size¨ above.
   ⍝ jsonOut:
   ⍝   The 2nd element returned; a char. string representing the udpated
   ⍝   JSON5 key-value pairs.

     T F←⊂∘⊂¨'true' 'false'   ⍝ JSON true (1) and false (0)

     JDefs←{0=≢⍵:⎕NS ⍬ ⋄ Json ⍵}
     Json←⎕JSON⍠'Dialect' 'JSON5'
     Opts←{,∘⊂⍣(2≥|≡⍵)⊢⍵}
     MergeNs←{⍺ ⍺⍺.{⍎⍺,'←⍵'}⊃T F ⍵/⍨1,⍨1 0≡¨⊂⍵}
     GetSize←'ns.size'∘{0≠⎕NC ⍺:(⎕EX ⍺)⊢⎕OR ⍺ ⋄ ⍵}

     ⍺←'{}' ⋄ sizeDef←⍺⍺
     0=≢⍵:sizeDef,⍥⊂⍺
     ns←JDefs ⍺
     _←(ns MergeNs)/¨Opts ⍵
     (Json ns),⍨⍥⊂GetSize sizeDef
 }
 
:EndNamespace 

example← 'M' Here ⎕SRC ⎕THIS                       ⍝ a markdown example.  

Show←{
⍝ hNs@CVV← size@IV=(800 1000) ∇ markdown@CVV
⍝ markdown: APL char vectors (CVV)  
⍝ size:     Html window size (default: 800 1000)  
⍝ hNs:      Dyalog Render object (⎕WC namespace)
⍝           hNs.HTML contains the generated HTML as a character vector with CR's (via HTMLRenderer)
⍝           hNs.md contains the source markdown used to generate it.
⍝ Once the result returned disappears, the generated HTML object disappears also.
⍝ Do:              h← size Markdown.Show ... 
⍝ Then to delete:  ⎕EX 'h' OR h←''
  ⍺← '' 
  markdown← ⍵ 
  s hj← ⍺{ s← 800 1000
   ⍝  0= ≢⍺: s ('H1?' Here ⍵)
      size jNew← ('{', Flat  1↓'H1' Here ⍵)(s Json.Opts2Json) ⍺   ⍝ H1: Default JSON
      hj← Flat '__JSON__\h*;' ⎕R jNew⍠('ML' 1) ⊢ Flat 'H2?' Here ⍵        ⍝ H2: Stub for JSON
      s hj 
  } ⎕SRC ⎕THIS 
  html← markdown MD hj                            ⍝ Insert the markdown text into the HTML/JS code   
  o← s Html.Render html                           ⍝ Render and return the HTML object
  o⊣ o.md← ⍵                                      ⍝ Make a private copy of the markdown from the user...
}

⍝ -------------------------------------------------------------------------------------------
⍝  example: Markdown example source 
⍝M # An example of *Markdown* in the ***Showdown*** dialect
⍝M
⍝M ## A Paragraph
⍝M This is a paragraph with **bold** text and this Emoji smile :smile: is generated via 
⍝M the expression :smile\:.  We have set **simpleLineBreaks: false**, so a single paragraph 
⍝M can be generated from multiple contiguous lines.
⍝M We have four such lines here making one paragraph. This face 😜 is represented _directly_ in APL. 
⍝M
⍝M 1. This is a bullet
⍝M      * This is a *sub-*bullet.
⍝M           * A sub***ber*** bullet.
⍝M           * And another!
⍝M 1. This is another top-level bullet. 
⍝M 1. As is this.
⍝M      We right now do NOT allow simplified autolinks to places like http://www.dyalog.com.
⍝M
⍝M     > A blockquote would look great here...
⍝M
⍝M 1. A final bullet?
⍝M 
⍝M ### Tonnage of [Columbus' Ships](http://columbuslandfall.com/ccnav/ships.shtml)\. 
⍝M 
⍝M   | Ship  | Niña    | Pinta | Santa Maria |
⍝M   |: ---- |: ----- :|:-----:|:-----:|
⍝M   | Type | caravel | caravel | carrack |
⍝M   | Tonnage | 50-60 tons   | 70 tons  | 100 tons |
⍝M   | Perceived size | ~~big~~| ~~bigger~~ | ~~gigantic~~ |
⍝M   | Actual size| shrimpy shrimp | small shrimp | jumbo shrimp |
⍝M
⍝M **Note:** The above link to Columbus' Ships is an *explicit* link.
⍝M
⍝M ----
⍝M 
⍝M This is code: `⍳2` 
⍝M 
⍝M This is *also* code: <code>⍳3</code> 
⍝M 
⍝M And so is this:
⍝M 
⍝M      ⍝ Set off with 6 blanks
⍝M        ∇ P← A IOTA B
⍝M          P← A ⍳ B
⍝M        ∇
⍝M
⍝M This should work. Does it? (**Yes**)
⍝M ```
⍝M +/⍺⍳⍵
⍝M -\⍵⍳⍺
⍝M ```
⍝M
⍝M ### What about tasks?
⍝M + [x] This task is done
⍝M - [ ] This is still pending
⍝M + [x] We knocked this out of the park!
⍝M 
⍝M ### Goodbye:exclamation::exclamation::exclamation:
⍝M 

⍝ -------------------------------------------------------------------------------------------
⍝  Markdown-to-Html code-- "showdown" javascript
⍝H <!DOCTYPE html>
⍝H <html>
⍝H <head>
⍝H   <title>Showdown Example</title>
⍝H   <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js" 
⍝H        integrity="sha512-LhccdVNGe2QMEfI3x4DVV3ckMRe36TfydKss6mJpdHjNFiV07dFpS2xzeZedptKZrwxfICJpez09iNioiSZ3hA==" 
⍝H        crossorigin="anonymous" referrerpolicy="no-referrer">
⍝H   </script>
⍝H </head>
⍝H <body>
⍝H   <div id="markdown-content" style="display:none;">
⍝H     ___MYTEXT___          // User Markdown will replace this entire line!
⍝H   </div>
⍝H   <div id="html-content"></div>
⍝H   <script>
⍝H     var markdownText = document.getElementById('markdown-content').textContent;
⍝H2    var opts= __JSON__;
⍝H1    var opts = {
⍝        // For all options except ghCodeBlocks, the DEFAULT value is false
⍝        // Simple line break: If true, simple line break in paragraph emits <br>.
⍝        //                    If false (default), simple line break does not emit <br>.
⍝H1         simpleLineBreaks: false, 
⍝        // Enable tables 
⍝H1         tables: true,
⍝        // Enable strikethrough 
⍝H1         strikethrough: true,
⍝        // Omit extra line break in code blocks
⍝H1         omitExtraWLInCodeBlocks: true,
⍝        // Enable GitHub-compatible header IDs
⍝H1         ghCompatibleHeaderId: true,
⍝        // Fenced code blocks. True (default), enable code blocks with ``` ... ``` 
⍝H1         ghCodeBlocks: true,
⍝        // Prefix header IDs with "custom-id-"
⍝H1         prefixHeaderId: 'custom-id-',
⍝        // Enable emoji support 
⍝H1         emoji: true,
⍝        // Enable task lists 
⍝H1         tasklists: true,
⍝        // Disable automatic wrapping of HTML blocks
⍝H1         noHTMLBlocks: false,
⍝        // Allow simple URLs like http://dyalog.com in text to be treated as actual links. 
⍝        // Keep in mind that selecting a link will leave the Markdown page, w/o an easy way  
⍝        // to return (except by recreating the page).
⍝H1         simplifiedAutoLink: false,           
⍝H1    }
⍝H     const converter = new showdown.Converter(opts);
⍝H     const html = converter.makeHtml(markdownText);
⍝H     document.getElementById('html-content').innerHTML = html;
⍝H   </script>
⍝H </body>
⍝H </html>
:EndNamespace 
